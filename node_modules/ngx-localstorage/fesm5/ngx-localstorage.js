import { __assign, __decorate, __param, __metadata } from 'tslib';
import { InjectionToken, Inject, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, ElementRef, Input, Output, Directive, Optional, SkipSelf, NgModule } from '@angular/core';
import { BehaviorSubject, fromEvent } from 'rxjs';
import { filter, share, debounceTime } from 'rxjs/operators';

/**
 * Gets an objects property based on its path.
 * @param path Path to the property
 * @param object Object to access
 */
var getProperty = function (path, object) {
    return path.reduce(function (obj, p) { return (!!obj) ? obj[p] : null; }, object);
};
/**
 * Sets an objects property based on its path.
 * @param path Path to the property
 * @param value Value to set
 * @param object Object whose value to set
 * @param falsyTransformer optional transformer handling falsy values
 */
var setProperty = function (path, value, object, falsyTransformer) {
    var lastKeyIndex = path.length - 1;
    for (var i = 0; i < lastKeyIndex; ++i) {
        var key = path[i];
        if (!(key in object)) {
            object[key] = {};
        }
        object = object[key];
    }
    object[path[lastKeyIndex]] = (!value || (typeof value === 'string' && value === 'false'))
        && !!falsyTransformer ? falsyTransformer() : value;
};
/**
 * Constructs the storage key based on a prefix - if given - and the key itself
 */
var constructKey = function (key, prefix, configuredPrefix) {
    var prefixToUse = prefix || configuredPrefix;
    if (prefixToUse) {
        return prefixToUse + "_" + key;
    }
    return key;
};
/**
 * The librarys default config.
 */
var defaultConfig = {
    allowNull: true
};
/**
 * StorageSerializer Guard
 */
var isSerializer = function (prefixOrSerializer) {
    return !!prefixOrSerializer && prefixOrSerializer.serialize !== undefined;
};

/**
 * Provides a Promise based service to access the localstorage.
 */
var PromisableService = /** @class */ (function () {
    /**
     * Creates a new instance
     */
    function PromisableService(configuration, defaultSerializer) {
        this.configuration = configuration;
        this.defaultSerializer = defaultSerializer;
    }
    /**
     * Gets the number of entries in the applications local storage.
     */
    PromisableService.prototype.count = function () {
        return new Promise(function (resolve, reject) {
            try {
                resolve(localStorage.length);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    /**
     * Returns the nth (defined by the index parameter) key in the storage.
     * The order of keys is user-agent defined, so you should not rely on it.
     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
     */
    PromisableService.prototype.getKey = function (index) {
        return new Promise(function (resolve, reject) {
            if (index < 0) {
                reject(new Error('index has to be 0 or greater'));
            }
            try {
                resolve(localStorage.key(index));
            }
            catch (error) {
                reject(error);
            }
        });
    };
    PromisableService.prototype.set = function (key, value, prefixOrSerializer, serializer) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                var prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;
                serializer = isSerializer(prefixOrSerializer)
                    ? prefixOrSerializer
                    : !!serializer
                        ? serializer
                        : _this.defaultSerializer;
                if (_this.configuration.allowNull
                    || (!_this.configuration.allowNull && value !== 'null' && value !== null && value !== undefined)) {
                    localStorage.setItem(constructKey(key, prefix, _this.configuration.prefix), serializer.serialize(value));
                }
                else {
                    return _this.remove(key, prefix);
                }
                resolve(true);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    PromisableService.prototype.get = function (key, prefixOrSerializer, serializer) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                var prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;
                serializer = isSerializer(prefixOrSerializer)
                    ? prefixOrSerializer
                    : !!serializer
                        ? serializer
                        : _this.defaultSerializer;
                resolve(serializer.deserialize(localStorage.getItem(constructKey(key, prefix, _this.configuration.prefix))));
            }
            catch (error) {
                reject(error);
            }
        });
    };
    /**
     * Removes the entry specified by the given key.
     * @param key     Key identifying the entry to remove.
     * @param prefix  Optional prefix to overwrite the configured one.
     */
    PromisableService.prototype.remove = function (key, prefix) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                localStorage.removeItem(constructKey(key, prefix, _this.configuration.prefix));
                resolve(true);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    /**
     * Clears all entries of the applications local storage.
     */
    PromisableService.prototype.clear = function () {
        return new Promise(function (resolve, reject) {
            try {
                localStorage.clear();
                resolve(true);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    return PromisableService;
}());

/**
 * Provides an injection token for the service configuration.
 */
var NGX_LOCAL_STORAGE_CONFIG = new InjectionToken('NgxLocalstorageConfiguration');

/**
 * Provides an injection token for the services serializer.
 */
var NGX_LOCAL_STORAGE_SERIALIZER = new InjectionToken('StorageSerializer');

/**
 * Provides a service to access the localstorage.
 */
var LocalStorageService = /** @class */ (function () {
    /**
     * Creates a new instance.
     */
    function LocalStorageService(defaultSerializer, config) {
        this.defaultSerializer = defaultSerializer;
        this.config = config;
        this.config = __assign(__assign({}, defaultConfig), config);
        this.promisable = new PromisableService(this.config, this.defaultSerializer);
    }
    /**
     * Returns a service variant based on Promises.
     */
    LocalStorageService.prototype.asPromisable = function () {
        return this.promisable;
    };
    /**
     * Gets the number of entries in the applications local storage.
     */
    LocalStorageService.prototype.count = function () {
        try {
            return localStorage.length;
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Returns the nth (defined by the index parameter) key in the storage.
     * The order of keys is user-agent defined, so you should not rely on it.
     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
     */
    LocalStorageService.prototype.getKey = function (index) {
        if (index < 0) {
            console.error(new Error('index has to be 0 or greater'));
        }
        try {
            return localStorage.key(index);
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Adds the value with the given key or updates an existing entry.
     * @param key     Key to store.
     * @param value   Value to store.
     * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.
     * @param serializer  Optional serilizer.
     */
    LocalStorageService.prototype.set = function (key, value, prefixOrSerializer, serializer) {
        var prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;
        serializer = isSerializer(prefixOrSerializer)
            ? prefixOrSerializer
            : !!serializer
                ? serializer
                : this.defaultSerializer;
        if (this.config.allowNull ||
            (!this.config.allowNull &&
                value !== 'null' &&
                value !== null &&
                value !== undefined)) {
            localStorage.setItem(constructKey(key, prefix, this.config.prefix), serializer.serialize(value));
        }
        else {
            this.remove(key, constructKey(key, prefix, this.config.prefix));
        }
    };
    /**
     * Gets the entry specified by the given key or null.
     * @param key     Key identifying the wanted entry.
     * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.
     * @param serializer  Optional serilizer.
     */
    LocalStorageService.prototype.get = function (key, prefixOrSerializer, serializer) {
        var prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;
        serializer = isSerializer(prefixOrSerializer)
            ? prefixOrSerializer
            : !!serializer
                ? serializer
                : this.defaultSerializer;
        try {
            return serializer.deserialize(localStorage.getItem(constructKey(key, prefix, this.config.prefix)));
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Removes the entry specified by the given key.
     * @param key     Key identifying the entry to remove.
     * @param prefix  Optional prefix to overwrite the configured one.
     */
    LocalStorageService.prototype.remove = function (key, prefix) {
        try {
            localStorage.removeItem(constructKey(key, prefix, this.config.prefix));
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Clears all entries of the applications local storage.
     */
    LocalStorageService.prototype.clear = function () {
        try {
            localStorage.clear();
        }
        catch (error) {
            console.error(error);
        }
    };
    LocalStorageService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGX_LOCAL_STORAGE_SERIALIZER,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [NGX_LOCAL_STORAGE_CONFIG,] }] }
    ]; };
    LocalStorageService.ɵprov = ɵɵdefineInjectable({ factory: function LocalStorageService_Factory() { return new LocalStorageService(ɵɵinject(NGX_LOCAL_STORAGE_SERIALIZER), ɵɵinject(NGX_LOCAL_STORAGE_CONFIG)); }, token: LocalStorageService, providedIn: "root" });
    LocalStorageService = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(0, Inject(NGX_LOCAL_STORAGE_SERIALIZER)),
        __param(1, Inject(NGX_LOCAL_STORAGE_CONFIG)),
        __metadata("design:paramtypes", [Object, Object])
    ], LocalStorageService);
    return LocalStorageService;
}());

/**
 * Provides a service
 */
var StorageEventService = /** @class */ (function () {
    /**
     * Create e new instance.
     */
    function StorageEventService() {
        var _this = this;
        this._eventStream = new BehaviorSubject(null);
        this.subscription = fromEvent(window, 'storage')
            .subscribe(function (ev) { return _this._eventStream.next(ev); });
    }
    Object.defineProperty(StorageEventService.prototype, "stream", {
        /**
         * Gets a stream of storage events.
         */
        get: function () {
            return this._eventStream
                .asObservable().pipe(filter(function (ev) { return !!ev; }), share());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * OnDestroy lifecycle hook. Clears the subscription.
     */
    StorageEventService.prototype.ngOnDestroy = function () {
        if (!!this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    };
    StorageEventService.ɵprov = ɵɵdefineInjectable({ factory: function StorageEventService_Factory() { return new StorageEventService(); }, token: StorageEventService, providedIn: "root" });
    StorageEventService = __decorate([
        Injectable({ providedIn: 'root' }),
        __metadata("design:paramtypes", [])
    ], StorageEventService);
    return StorageEventService;
}());

/**
 * Provide a directive to directly interact with stored values.
 */
var LocalStorageDirective = /** @class */ (function () {
    /**
     * Creates a new instance.
     */
    function LocalStorageDirective(er, lss, es) {
        var _this = this;
        this.er = er;
        this.lss = lss;
        this.es = es;
        /**
         * An optional debounce for storage write access after value changes.
         */
        this.lsDebounce = 0;
        /**
         * Flag if the bound elements value should be initialized from storage.
         */
        this.lsInitFromStorage = false;
        /**
         * Event which gets fired when a bound value got stored.
         */
        this.lsStoredValue = new EventEmitter();
        this._valuePath = [];
        this.es.stream.pipe(
        // TODO: filter should be more accurate
        filter(function (ev) { return ev.key && ev.key.indexOf(_this.lsKey) >= 0; }))
            .subscribe(function (ev) {
            setProperty(_this._valuePath.length ? _this._valuePath : ['value'], ev.newValue, _this.er.nativeElement, _this.lsFalsyTransformer);
        });
    }
    Object.defineProperty(LocalStorageDirective.prototype, "lsValuePath", {
        /**
         * Provides a path to access the bound elements value property.
         */
        set: function (path) {
            if (path != null) {
                this._valuePath = Array.isArray(path) ? path : path.split(',');
            }
            else {
                this._valuePath = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * AfterViewInit lifecycle hook.
     */
    LocalStorageDirective.prototype.ngAfterViewInit = function () {
        this._initKey();
        this._initFromStorage();
        this._hookEvent();
    };
    /**
     * Initalizes the from either the given value or the elements id or name property.
     */
    LocalStorageDirective.prototype._initKey = function () {
        if (!this.lsKey) {
            if (!this.er.nativeElement.id && !this.er.nativeElement.name) {
                throw new Error('No key or element id or name supplied!');
            }
            this.lsKey = this.er.nativeElement.id || this.er.nativeElement.name;
        }
    };
    /**
     * Hooks onto the elements given event to perform storage write on value changes.
     */
    LocalStorageDirective.prototype._hookEvent = function () {
        var _this = this;
        if (this.lsEvent) {
            this._eventSubscription = fromEvent(this.er.nativeElement, this.lsEvent).pipe(debounceTime(this.lsDebounce))
                .subscribe(function () {
                _this.lss.asPromisable().set(_this.lsKey, getProperty(_this._valuePath.length ? _this._valuePath : ['value'], _this.er.nativeElement), _this.lsPrefix)
                    .then(function () {
                    _this.lss.asPromisable().get(_this.lsKey, _this.lsPrefix)
                        .then(function (value) {
                        _this.lsStoredValue.emit(value);
                    })
                        .catch(function (err) { return console.error(err); });
                })
                    .catch(function (err) { return console.error(err); });
            });
        }
    };
    /**
     * Initializes the elements value from storage.
     */
    LocalStorageDirective.prototype._initFromStorage = function () {
        var _this = this;
        if (this.lsInitFromStorage) {
            this.lss.asPromisable().get(this.lsKey, this.lsPrefix)
                .then(function (storedValue) {
                setProperty(_this._valuePath.length ? _this._valuePath : ['value'], storedValue, _this.er.nativeElement, _this.lsFalsyTransformer);
            })
                .catch(function (err) { return console.error(err); });
        }
    };
    /**
     * Unsubscribe from event observable.
     */
    LocalStorageDirective.prototype.ngOnDestroy = function () {
        if (this._eventSubscription && !this._eventSubscription.closed) {
            this._eventSubscription.unsubscribe();
        }
    };
    LocalStorageDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: LocalStorageService },
        { type: StorageEventService }
    ]; };
    __decorate([
        Input('ngxLocalStorage'),
        __metadata("design:type", String)
    ], LocalStorageDirective.prototype, "lsKey", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], LocalStorageDirective.prototype, "lsPrefix", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], LocalStorageDirective.prototype, "lsEvent", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LocalStorageDirective.prototype, "lsDebounce", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LocalStorageDirective.prototype, "lsInitFromStorage", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], LocalStorageDirective.prototype, "lsFalsyTransformer", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], LocalStorageDirective.prototype, "lsValuePath", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], LocalStorageDirective.prototype, "lsStoredValue", void 0);
    LocalStorageDirective = __decorate([
        Directive({
            selector: '[ngxLocalStorage]'
        }),
        __metadata("design:paramtypes", [ElementRef,
            LocalStorageService,
            StorageEventService])
    ], LocalStorageDirective);
    return LocalStorageDirective;
}());

/**
 * Provides a default serialization mechanism while
 */
var DefaultSerializer = /** @class */ (function () {
    function DefaultSerializer() {
    }
    /**
     * @inheritdoc
     */
    DefaultSerializer.prototype.serialize = function (value) {
        return JSON.stringify(value);
    };
    /**
     * @inheritdoc
     */
    DefaultSerializer.prototype.deserialize = function (storedValue) {
        return JSON.parse(storedValue);
    };
    return DefaultSerializer;
}());

/**
 * Provides the librarys module.
 */
var NgxLocalStorageModule = /** @class */ (function () {
    /**
     * Creates a new instance.
     */
    function NgxLocalStorageModule(parentModule) {
        if (parentModule) {
            throw new Error('NgxLocalStorageModule is already loaded. Import it in the AppModule only');
        }
    }
    NgxLocalStorageModule_1 = NgxLocalStorageModule;
    /**
     * Initializes the module for the root module with the given configuration.
     */
    NgxLocalStorageModule.forRoot = function (config) {
        return {
            ngModule: NgxLocalStorageModule_1,
            providers: [
                {
                    provide: NGX_LOCAL_STORAGE_CONFIG,
                    useValue: config
                }
            ]
        };
    };
    var NgxLocalStorageModule_1;
    NgxLocalStorageModule.ctorParameters = function () { return [
        { type: NgxLocalStorageModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    NgxLocalStorageModule = NgxLocalStorageModule_1 = __decorate([
        NgModule({
            imports: [],
            declarations: [
                LocalStorageDirective
            ],
            exports: [
                LocalStorageDirective
            ],
            providers: [
                {
                    provide: NGX_LOCAL_STORAGE_SERIALIZER,
                    useClass: DefaultSerializer
                }
            ]
        }),
        __param(0, Optional()), __param(0, SkipSelf()),
        __metadata("design:paramtypes", [NgxLocalStorageModule])
    ], NgxLocalStorageModule);
    return NgxLocalStorageModule;
}());

/**
 * Provides a decoarator to bind a property directly to a storage value.
 * @param options configuration used for the decoarator
 */
function ngxLocalStorage(options) {
    return function (target, propertyDescription) {
        var key = !!options && !!options.key ? options.key : propertyDescription;
        var prefix = !!options && !!options.prefix ? options.prefix : null;
        var service = new LocalStorageService(new DefaultSerializer(), {
            prefix: prefix
        });
        var eventService = new StorageEventService();
        eventService.stream.pipe(
        // TODO: filter should be more accurate
        filter(function (ev) { return ev.key && ev.key.indexOf(constructKey(key, prefix)) >= 0; }))
            .subscribe(function (ev) {
            if (!!ev.newValue && typeof ev.newValue === 'string') {
                if (ev.newValue !== 'null') {
                    target[propertyDescription] = ev.newValue;
                }
                else {
                    target[propertyDescription] = !!options.nullTransformer ? options.nullTransformer() : null;
                }
            }
        });
        Object.defineProperty(target, propertyDescription, {
            get: function () {
                var storageValue = service.get(key, prefix);
                return storageValue == null && !!options.nullTransformer ? options.nullTransformer() : storageValue;
            },
            set: function (value) {
                service.set(key, value, prefix);
            }
        });
    };
}

/*
 * Public API Surface of ngx-localstorage
 */

/**
 * Generated bundle index. Do not edit.
 */

export { LocalStorageDirective, LocalStorageService, NGX_LOCAL_STORAGE_CONFIG, NGX_LOCAL_STORAGE_SERIALIZER, NgxLocalStorageModule, StorageEventService, ngxLocalStorage, DefaultSerializer as ɵa };
//# sourceMappingURL=ngx-localstorage.js.map
