{"version":3,"file":"utils.js","sourceRoot":"C:/dev/web/ngx-localstorage/libs/ngx-localstorage/src/","sources":["lib/utils.ts"],"names":[],"mappings":"AAGA;;;;GAIG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAc,EAAE,MAAW,EAAE,EAAE,CACzD,IAAI,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAErE;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAuB,EAAE,KAAU,EAAE,MAAW,EAAE,gBAA4B,EAAE,EAAE;IAC5G,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,EAAE,CAAC,EAAE;QACrC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,EAAE;YACpB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;SAClB;QACD,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;KACtB;IACD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,OAAO,CAAC,CAAC;WACpF,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;AACvD,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,GAAW,EAAE,MAAe,EAAE,gBAAyB,EAAU,EAAE;IAC9F,MAAM,WAAW,GAAG,MAAM,IAAI,gBAAgB,CAAC;IAC/C,IAAI,WAAW,EAAE;QACf,OAAO,GAAG,WAAW,IAAI,GAAG,EAAE,CAAC;KAChC;IACD,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAiC;IACzD,SAAS,EAAE,IAAI;CAChB,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,kBAA8C,EAA2C,EAAE;IACtH,OAAO,CAAC,CAAC,kBAAkB,IAAK,kBAAwC,CAAC,SAAS,KAAK,SAAS,CAAC;AACnG,CAAC,CAAA","sourcesContent":["import { NgxLocalstorageConfiguration } from './interfaces/storage-configuration';\r\nimport { StorageSerializer } from './interfaces/storage-serializer';\r\n\r\n/**\r\n * Gets an objects property based on its path.\r\n * @param path Path to the property\r\n * @param object Object to access\r\n */\r\nexport const getProperty = (path: string[], object: any) =>\r\n  path.reduce((obj: any, p: any) => (!!obj) ? obj[p] : null, object);\r\n\r\n/**\r\n * Sets an objects property based on its path.\r\n * @param path Path to the property\r\n * @param value Value to set\r\n * @param object Object whose value to set\r\n * @param falsyTransformer optional transformer handling falsy values\r\n */\r\nexport const setProperty = (path: string[] | string, value: any, object: any, falsyTransformer?: () => any) => {\r\n  const lastKeyIndex = path.length - 1;\r\n  for (let i = 0; i < lastKeyIndex; ++i) {\r\n    const key = path[i];\r\n    if (!(key in object)) {\r\n      object[key] = {};\r\n    }\r\n    object = object[key];\r\n  }\r\n  object[path[lastKeyIndex]] = (!value || (typeof value === 'string' && value === 'false'))\r\n    && !!falsyTransformer ? falsyTransformer() : value;\r\n};\r\n\r\n/**\r\n * Constructs the storage key based on a prefix - if given - and the key itself\r\n */\r\nexport const constructKey = (key: string, prefix?: string, configuredPrefix?: string): string => {\r\n  const prefixToUse = prefix || configuredPrefix;\r\n  if (prefixToUse) {\r\n    return `${prefixToUse}_${key}`;\r\n  }\r\n  return key;\r\n}\r\n\r\n/**\r\n * The librarys default config.\r\n */\r\nexport const defaultConfig: NgxLocalstorageConfiguration = {\r\n  allowNull: true\r\n};\r\n\r\n/**\r\n * StorageSerializer Guard\r\n */\r\nexport const isSerializer = (prefixOrSerializer: string | StorageSerializer): prefixOrSerializer is StorageSerializer => {\r\n  return !!prefixOrSerializer && (prefixOrSerializer as StorageSerializer).serialize !== undefined;\r\n}\r\n"]}