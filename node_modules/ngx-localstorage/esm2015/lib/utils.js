/**
 * Gets an objects property based on its path.
 * @param path Path to the property
 * @param object Object to access
 */
export const getProperty = (path, object) => path.reduce((obj, p) => (!!obj) ? obj[p] : null, object);
/**
 * Sets an objects property based on its path.
 * @param path Path to the property
 * @param value Value to set
 * @param object Object whose value to set
 * @param falsyTransformer optional transformer handling falsy values
 */
export const setProperty = (path, value, object, falsyTransformer) => {
    const lastKeyIndex = path.length - 1;
    for (let i = 0; i < lastKeyIndex; ++i) {
        const key = path[i];
        if (!(key in object)) {
            object[key] = {};
        }
        object = object[key];
    }
    object[path[lastKeyIndex]] = (!value || (typeof value === 'string' && value === 'false'))
        && !!falsyTransformer ? falsyTransformer() : value;
};
/**
 * Constructs the storage key based on a prefix - if given - and the key itself
 */
export const constructKey = (key, prefix, configuredPrefix) => {
    const prefixToUse = prefix || configuredPrefix;
    if (prefixToUse) {
        return `${prefixToUse}_${key}`;
    }
    return key;
};
/**
 * The librarys default config.
 */
export const defaultConfig = {
    allowNull: true
};
/**
 * StorageSerializer Guard
 */
export const isSerializer = (prefixOrSerializer) => {
    return !!prefixOrSerializer && prefixOrSerializer.serialize !== undefined;
};
//# sourceMappingURL=utils.js.map