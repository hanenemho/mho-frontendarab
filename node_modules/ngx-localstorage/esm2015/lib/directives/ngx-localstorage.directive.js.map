{"version":3,"file":"ngx-localstorage.directive.js","sourceRoot":"C:/dev/web/ngx-localstorage/libs/ngx-localstorage/src/","sources":["lib/directives/ngx-localstorage.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\r\nimport { fromEvent as observableFromEvent, Subscription } from 'rxjs';\r\nimport { debounceTime, filter } from 'rxjs/operators';\r\n\r\nimport { getProperty, setProperty } from '../utils';\r\nimport { LocalStorageService } from '../services/ngx-localstorage.service';\r\nimport { StorageEventService } from '../services/storage-event.service';\r\n\r\n/**\r\n * Provide a directive to directly interact with stored values.\r\n */\r\n@Directive({\r\n  selector: '[ngxLocalStorage]'\r\n})\r\nexport class LocalStorageDirective implements AfterViewInit, OnDestroy {\r\n\r\n  /**\r\n   * The key to use with localstorage.\r\n   */\r\n  @Input('ngxLocalStorage')\r\n  public lsKey: string;\r\n  /**\r\n   * The keys prefix to use.\r\n   */\r\n  @Input()\r\n  public lsPrefix: string;\r\n  /**\r\n   * The event to hook onto value changes.\r\n   */\r\n  @Input()\r\n  public lsEvent: string;\r\n  /**\r\n   * An optional debounce for storage write access after value changes.\r\n   */\r\n  @Input()\r\n  public lsDebounce = 0;\r\n  /**\r\n   * Flag if the bound elements value should be initialized from storage.\r\n   */\r\n  @Input()\r\n  public lsInitFromStorage = false;\r\n  /**\r\n   * An optional transformer to handle falsy values.\r\n   */\r\n  @Input()\r\n  public lsFalsyTransformer?: () => any;\r\n\r\n  /**\r\n   * Provides a path to access the bound elements value property.\r\n   */\r\n  @Input()\r\n  public set lsValuePath(path: any[] | string) {\r\n    if (path != null) {\r\n      this._valuePath = Array.isArray(path) ? path : path.split(',');\r\n    } else {\r\n      this._valuePath = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event which gets fired when a bound value got stored.\r\n   */\r\n  @Output()\r\n  public lsStoredValue = new EventEmitter<any>();\r\n\r\n  private _eventSubscription: Subscription;\r\n  private _valuePath: string[] = [];\r\n\r\n  /**\r\n   * Creates a new instance.\r\n   */\r\n  constructor(private readonly er: ElementRef,\r\n    private readonly lss: LocalStorageService,\r\n    private readonly es: StorageEventService) {\r\n\r\n    this.es.stream.pipe(\r\n      // TODO: filter should be more accurate\r\n      filter((ev: StorageEvent) => ev.key && ev.key.indexOf(this.lsKey) >= 0)\r\n    )\r\n      .subscribe((ev: StorageEvent) => {\r\n        setProperty(this._valuePath.length ? this._valuePath : ['value'], ev.newValue, this.er.nativeElement, this.lsFalsyTransformer);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * AfterViewInit lifecycle hook.\r\n   */\r\n  public ngAfterViewInit(): void {\r\n    this._initKey();\r\n    this._initFromStorage();\r\n    this._hookEvent();\r\n  }\r\n\r\n  /**\r\n   * Initalizes the from either the given value or the elements id or name property.\r\n   */\r\n  private _initKey(): void {\r\n    if (!this.lsKey) {\r\n      if (!this.er.nativeElement.id && !this.er.nativeElement.name) {\r\n        throw new Error('No key or element id or name supplied!');\r\n      }\r\n      this.lsKey = this.er.nativeElement.id || this.er.nativeElement.name;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hooks onto the elements given event to perform storage write on value changes.\r\n   */\r\n  private _hookEvent(): void {\r\n    if (this.lsEvent) {\r\n      this._eventSubscription = observableFromEvent(this.er.nativeElement, this.lsEvent).pipe(\r\n        debounceTime(this.lsDebounce))\r\n        .subscribe(() => {\r\n          this.lss.asPromisable().set(this.lsKey,\r\n            getProperty(this._valuePath.length ? this._valuePath : ['value'], this.er.nativeElement),\r\n            this.lsPrefix)\r\n            .then(() => {\r\n              this.lss.asPromisable().get(this.lsKey, this.lsPrefix)\r\n                .then((value: any) => {\r\n                  this.lsStoredValue.emit(value);\r\n                })\r\n                .catch((err: Error) => console.error(err));\r\n            })\r\n            .catch((err: Error) => console.error(err));\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the elements value from storage.\r\n   */\r\n  private _initFromStorage(): void {\r\n    if (this.lsInitFromStorage) {\r\n      this.lss.asPromisable().get(this.lsKey, this.lsPrefix)\r\n        .then((storedValue: any) => {\r\n          setProperty(this._valuePath.length ? this._valuePath : ['value'], storedValue, this.er.nativeElement, this.lsFalsyTransformer);\r\n        })\r\n        .catch((err: Error) => console.error(err));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from event observable.\r\n   */\r\n  public ngOnDestroy(): void {\r\n    if (this._eventSubscription && !this._eventSubscription.closed) {\r\n      this._eventSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n"]}