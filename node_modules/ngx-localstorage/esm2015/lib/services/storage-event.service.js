import { Injectable } from '@angular/core';
import { fromEvent as observableFromEvent, BehaviorSubject } from 'rxjs';
import { share, filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * Provides a service
 */
export class StorageEventService {
    /**
     * Create e new instance.
     */
    constructor() {
        this._eventStream = new BehaviorSubject(null);
        this.subscription = observableFromEvent(window, 'storage')
            .subscribe((ev) => this._eventStream.next(ev));
    }
    /**
     * Gets a stream of storage events.
     */
    get stream() {
        return this._eventStream
            .asObservable().pipe(filter(ev => !!ev), share());
    }
    /**
     * OnDestroy lifecycle hook. Clears the subscription.
     */
    ngOnDestroy() {
        if (!!this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    }
}
StorageEventService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StorageEventService_Factory() { return new StorageEventService(); }, token: StorageEventService, providedIn: "root" });
StorageEventService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
StorageEventService.ctorParameters = () => [];
//# sourceMappingURL=storage-event.service.js.map