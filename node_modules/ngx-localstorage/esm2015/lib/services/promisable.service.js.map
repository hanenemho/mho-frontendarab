{"version":3,"file":"promisable.service.js","sourceRoot":"C:/dev/web/ngx-localstorage/libs/ngx-localstorage/src/","sources":["lib/services/promisable.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { NgxLocalstorageConfiguration } from '../interfaces/storage-configuration';\r\nimport { StorageSerializer } from '../interfaces/storage-serializer';\r\nimport { constructKey, isSerializer } from '../utils';\r\n\r\n/**\r\n * Provides a Promise based service to access the localstorage.\r\n */\r\nexport class PromisableService {\r\n\r\n  /**\r\n   * Creates a new instance\r\n   */\r\n  constructor(\r\n    private readonly configuration: NgxLocalstorageConfiguration,\r\n    private readonly defaultSerializer: StorageSerializer\r\n  ) { }\r\n\r\n  /**\r\n   * Gets the number of entries in the applications local storage.\r\n   */\r\n  public count(): Promise<number> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        resolve(localStorage.length);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the nth (defined by the index parameter) key in the storage.\r\n   * The order of keys is user-agent defined, so you should not rely on it.\r\n   * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.\r\n   */\r\n  public getKey(index: number): Promise<string | null> {\r\n    return new Promise<string | null>((resolve, reject) => {\r\n      if (index < 0) {\r\n        reject(new Error('index has to be 0 or greater'));\r\n      }\r\n      try {\r\n        resolve(localStorage.key(index));\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds the value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public set(key: string, value: any, prefixOrSerializer?: string | StorageSerializer): Promise<boolean>;\r\n  public set(key: string, value: any, prefixOrSerializer: string | StorageSerializer): Promise<boolean>;\r\n  public set(key: string, value: any, prefixOrSerializer: string, serializer: StorageSerializer): Promise<boolean>;\r\n  public set(key: string, value: any, prefixOrSerializer?: string | StorageSerializer, serializer?: StorageSerializer): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n\r\n        const prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;\r\n        serializer = isSerializer(prefixOrSerializer)\r\n          ? (prefixOrSerializer as StorageSerializer)\r\n          : !!serializer\r\n            ? serializer\r\n            : this.defaultSerializer;\r\n\r\n        if (this.configuration.allowNull\r\n          || (!this.configuration.allowNull && value !== 'null' && value !== null && value !== undefined)) {\r\n          localStorage.setItem(constructKey(key, prefix, this.configuration.prefix), serializer.serialize(value));\r\n        } else {\r\n          return this.remove(key, prefix);\r\n        }\r\n        resolve(true);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public get(key: string, prefixOrSerializer?: string | StorageSerializer): Promise<any | null | undefined>;\r\n  public get(key: string, prefixOrSerializer: string | StorageSerializer): Promise<any | null | undefined>;\r\n  public get(key: string, prefixOrSerializer: string, serializer: StorageSerializer): Promise<any | null | undefined>;\r\n  public get(key: string, prefixOrSerializer?: string | StorageSerializer, serializer?: StorageSerializer): Promise<any | null | undefined> {\r\n    return new Promise<any | null | undefined>((resolve, reject) => {\r\n      try {\r\n\r\n        const prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;\r\n        serializer = isSerializer(prefixOrSerializer)\r\n          ? (prefixOrSerializer as StorageSerializer)\r\n          : !!serializer\r\n            ? serializer\r\n            : this.defaultSerializer;\r\n\r\n        resolve(serializer.deserialize(localStorage.getItem(constructKey(key, prefix, this.configuration.prefix))));\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes the entry specified by the given key.\r\n   * @param key     Key identifying the entry to remove.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   */\r\n  public remove(key: string, prefix?: string): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        localStorage.removeItem(constructKey(key, prefix, this.configuration.prefix));\r\n        resolve(true);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clears all entries of the applications local storage.\r\n   */\r\n  public clear(): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        localStorage.clear();\r\n        resolve(true);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}