{"version":3,"file":"ngx-localstorage.service.js","sourceRoot":"C:/dev/web/ngx-localstorage/libs/ngx-localstorage/src/","sources":["lib/services/ngx-localstorage.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NgxLocalstorageConfiguration } from '../interfaces/storage-configuration';\r\nimport { PromisableService } from './promisable.service';\r\nimport { defaultConfig, constructKey, isSerializer } from '../utils';\r\nimport { NGX_LOCAL_STORAGE_CONFIG } from '../tokens/storage-config';\r\nimport { NGX_LOCAL_STORAGE_SERIALIZER } from '../tokens/storage-serializer';\r\nimport { StorageSerializer } from '../interfaces/storage-serializer';\r\n\r\n/**\r\n * Provides a service to access the localstorage.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class LocalStorageService {\r\n\r\n  private readonly promisable: PromisableService;\r\n\r\n  /**\r\n   * Creates a new instance.\r\n   */\r\n  constructor(\r\n    @Inject(NGX_LOCAL_STORAGE_SERIALIZER) private readonly defaultSerializer: StorageSerializer,\r\n    @Inject(NGX_LOCAL_STORAGE_CONFIG) public readonly config?: NgxLocalstorageConfiguration\r\n  ) {\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.promisable = new PromisableService(this.config, this.defaultSerializer);\r\n  }\r\n\r\n  /**\r\n   * Returns a service variant based on Promises.\r\n   */\r\n  public asPromisable(): PromisableService {\r\n    return this.promisable;\r\n  }\r\n\r\n  /**\r\n   * Gets the number of entries in the applications local storage.\r\n   */\r\n  public count(): number | undefined {\r\n    try {\r\n      return localStorage.length;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the nth (defined by the index parameter) key in the storage.\r\n   * The order of keys is user-agent defined, so you should not rely on it.\r\n   * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.\r\n   */\r\n  public getKey(index: number): string | null | undefined {\r\n    if (index < 0) {\r\n      console.error(new Error('index has to be 0 or greater'));\r\n    }\r\n    try {\r\n      return localStorage.key(index);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds the value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   */\r\n  public set(key: string, value: any, prefixOrSerializer?: string | StorageSerializer): void;\r\n  /**\r\n   * Adds the value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefixOrSerializer  prefix or serializer to overwrite the configured one.\r\n   */\r\n  public set(key: string, value: any, prefixOrSerializer: string | StorageSerializer): void;\r\n  /**\r\n   * Adds the value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public set(key: string, value: any, prefix: string, serializer: StorageSerializer): void;\r\n  /**\r\n   * Adds the value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public set(key: string, value: any, prefixOrSerializer?: string | StorageSerializer, serializer?: StorageSerializer): void {\r\n\r\n    const prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;\r\n    serializer = isSerializer(prefixOrSerializer)\r\n      ? (prefixOrSerializer as StorageSerializer)\r\n      : !!serializer\r\n        ? serializer\r\n        : this.defaultSerializer;\r\n\r\n    if (\r\n      this.config.allowNull ||\r\n      (!this.config.allowNull &&\r\n        value !== 'null' &&\r\n        value !== null &&\r\n        value !== undefined)\r\n    ) {\r\n      localStorage.setItem(constructKey(key, prefix, this.config.prefix), serializer.serialize(value));\r\n    } else {\r\n      this.remove(key, constructKey(key, prefix, this.config.prefix));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public get(key: string, prefixOrSerializer?: string | StorageSerializer): any | null | undefined;\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefixOrSerializer  prefix or serializer to overwrite the configured one.\r\n   */\r\n  public get(key: string, prefixOrSerializer: string | StorageSerializer): any | null | undefined;\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefix  prefix or serializer to overwrite the configured one.\r\n   * @param serializer serilizer.\r\n   */\r\n  public get(key: string, prefix: string, serializer: StorageSerializer): any | null | undefined;\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public get(key: string, prefixOrSerializer?: string | StorageSerializer, serializer?: StorageSerializer): any | null | undefined {\r\n\r\n    const prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;\r\n    serializer = isSerializer(prefixOrSerializer)\r\n      ? (prefixOrSerializer as StorageSerializer)\r\n      : !!serializer\r\n        ? serializer\r\n        : this.defaultSerializer;\r\n\r\n    try {\r\n      return serializer.deserialize(localStorage.getItem(constructKey(key, prefix, this.config.prefix)));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the entry specified by the given key.\r\n   * @param key     Key identifying the entry to remove.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   */\r\n  public remove(key: string, prefix?: string): void {\r\n    try {\r\n      localStorage.removeItem(constructKey(key, prefix, this.config.prefix));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears all entries of the applications local storage.\r\n   */\r\n  public clear(): void {\r\n    try {\r\n      localStorage.clear();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n}\r\n"]}