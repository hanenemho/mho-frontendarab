import { filter } from 'rxjs/operators';
import { LocalStorageService } from './services/ngx-localstorage.service';
import { StorageEventService } from './services/storage-event.service';
import { constructKey } from './utils';
import { DefaultSerializer } from './classes/default-serializer';
/**
 * Provides a decoarator to bind a property directly to a storage value.
 * @param options configuration used for the decoarator
 */
export function ngxLocalStorage(options) {
    return function (target, propertyDescription) {
        var key = !!options && !!options.key ? options.key : propertyDescription;
        var prefix = !!options && !!options.prefix ? options.prefix : null;
        var service = new LocalStorageService(new DefaultSerializer(), {
            prefix: prefix
        });
        var eventService = new StorageEventService();
        eventService.stream.pipe(
        // TODO: filter should be more accurate
        filter(function (ev) { return ev.key && ev.key.indexOf(constructKey(key, prefix)) >= 0; }))
            .subscribe(function (ev) {
            if (!!ev.newValue && typeof ev.newValue === 'string') {
                if (ev.newValue !== 'null') {
                    target[propertyDescription] = ev.newValue;
                }
                else {
                    target[propertyDescription] = !!options.nullTransformer ? options.nullTransformer() : null;
                }
            }
        });
        Object.defineProperty(target, propertyDescription, {
            get: function () {
                var storageValue = service.get(key, prefix);
                return storageValue == null && !!options.nullTransformer ? options.nullTransformer() : storageValue;
            },
            set: function (value) {
                service.set(key, value, prefix);
            }
        });
    };
}
//# sourceMappingURL=decorators.js.map