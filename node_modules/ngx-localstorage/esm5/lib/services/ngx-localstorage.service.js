import { __assign, __decorate, __metadata, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { PromisableService } from './promisable.service';
import { defaultConfig, constructKey, isSerializer } from '../utils';
import { NGX_LOCAL_STORAGE_CONFIG } from '../tokens/storage-config';
import { NGX_LOCAL_STORAGE_SERIALIZER } from '../tokens/storage-serializer';
import * as i0 from "@angular/core";
import * as i1 from "../tokens/storage-serializer";
import * as i2 from "../tokens/storage-config";
/**
 * Provides a service to access the localstorage.
 */
var LocalStorageService = /** @class */ (function () {
    /**
     * Creates a new instance.
     */
    function LocalStorageService(defaultSerializer, config) {
        this.defaultSerializer = defaultSerializer;
        this.config = config;
        this.config = __assign(__assign({}, defaultConfig), config);
        this.promisable = new PromisableService(this.config, this.defaultSerializer);
    }
    /**
     * Returns a service variant based on Promises.
     */
    LocalStorageService.prototype.asPromisable = function () {
        return this.promisable;
    };
    /**
     * Gets the number of entries in the applications local storage.
     */
    LocalStorageService.prototype.count = function () {
        try {
            return localStorage.length;
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Returns the nth (defined by the index parameter) key in the storage.
     * The order of keys is user-agent defined, so you should not rely on it.
     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
     */
    LocalStorageService.prototype.getKey = function (index) {
        if (index < 0) {
            console.error(new Error('index has to be 0 or greater'));
        }
        try {
            return localStorage.key(index);
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Adds the value with the given key or updates an existing entry.
     * @param key     Key to store.
     * @param value   Value to store.
     * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.
     * @param serializer  Optional serilizer.
     */
    LocalStorageService.prototype.set = function (key, value, prefixOrSerializer, serializer) {
        var prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;
        serializer = isSerializer(prefixOrSerializer)
            ? prefixOrSerializer
            : !!serializer
                ? serializer
                : this.defaultSerializer;
        if (this.config.allowNull ||
            (!this.config.allowNull &&
                value !== 'null' &&
                value !== null &&
                value !== undefined)) {
            localStorage.setItem(constructKey(key, prefix, this.config.prefix), serializer.serialize(value));
        }
        else {
            this.remove(key, constructKey(key, prefix, this.config.prefix));
        }
    };
    /**
     * Gets the entry specified by the given key or null.
     * @param key     Key identifying the wanted entry.
     * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.
     * @param serializer  Optional serilizer.
     */
    LocalStorageService.prototype.get = function (key, prefixOrSerializer, serializer) {
        var prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;
        serializer = isSerializer(prefixOrSerializer)
            ? prefixOrSerializer
            : !!serializer
                ? serializer
                : this.defaultSerializer;
        try {
            return serializer.deserialize(localStorage.getItem(constructKey(key, prefix, this.config.prefix)));
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Removes the entry specified by the given key.
     * @param key     Key identifying the entry to remove.
     * @param prefix  Optional prefix to overwrite the configured one.
     */
    LocalStorageService.prototype.remove = function (key, prefix) {
        try {
            localStorage.removeItem(constructKey(key, prefix, this.config.prefix));
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Clears all entries of the applications local storage.
     */
    LocalStorageService.prototype.clear = function () {
        try {
            localStorage.clear();
        }
        catch (error) {
            console.error(error);
        }
    };
    LocalStorageService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGX_LOCAL_STORAGE_SERIALIZER,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [NGX_LOCAL_STORAGE_CONFIG,] }] }
    ]; };
    LocalStorageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LocalStorageService_Factory() { return new LocalStorageService(i0.ɵɵinject(i1.NGX_LOCAL_STORAGE_SERIALIZER), i0.ɵɵinject(i2.NGX_LOCAL_STORAGE_CONFIG)); }, token: LocalStorageService, providedIn: "root" });
    LocalStorageService = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(0, Inject(NGX_LOCAL_STORAGE_SERIALIZER)),
        __param(1, Inject(NGX_LOCAL_STORAGE_CONFIG)),
        __metadata("design:paramtypes", [Object, Object])
    ], LocalStorageService);
    return LocalStorageService;
}());
export { LocalStorageService };
//# sourceMappingURL=ngx-localstorage.service.js.map