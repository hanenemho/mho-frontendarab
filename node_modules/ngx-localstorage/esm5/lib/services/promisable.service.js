import { constructKey, isSerializer } from '../utils';
/**
 * Provides a Promise based service to access the localstorage.
 */
var PromisableService = /** @class */ (function () {
    /**
     * Creates a new instance
     */
    function PromisableService(configuration, defaultSerializer) {
        this.configuration = configuration;
        this.defaultSerializer = defaultSerializer;
    }
    /**
     * Gets the number of entries in the applications local storage.
     */
    PromisableService.prototype.count = function () {
        return new Promise(function (resolve, reject) {
            try {
                resolve(localStorage.length);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    /**
     * Returns the nth (defined by the index parameter) key in the storage.
     * The order of keys is user-agent defined, so you should not rely on it.
     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
     */
    PromisableService.prototype.getKey = function (index) {
        return new Promise(function (resolve, reject) {
            if (index < 0) {
                reject(new Error('index has to be 0 or greater'));
            }
            try {
                resolve(localStorage.key(index));
            }
            catch (error) {
                reject(error);
            }
        });
    };
    PromisableService.prototype.set = function (key, value, prefixOrSerializer, serializer) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                var prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;
                serializer = isSerializer(prefixOrSerializer)
                    ? prefixOrSerializer
                    : !!serializer
                        ? serializer
                        : _this.defaultSerializer;
                if (_this.configuration.allowNull
                    || (!_this.configuration.allowNull && value !== 'null' && value !== null && value !== undefined)) {
                    localStorage.setItem(constructKey(key, prefix, _this.configuration.prefix), serializer.serialize(value));
                }
                else {
                    return _this.remove(key, prefix);
                }
                resolve(true);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    PromisableService.prototype.get = function (key, prefixOrSerializer, serializer) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                var prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;
                serializer = isSerializer(prefixOrSerializer)
                    ? prefixOrSerializer
                    : !!serializer
                        ? serializer
                        : _this.defaultSerializer;
                resolve(serializer.deserialize(localStorage.getItem(constructKey(key, prefix, _this.configuration.prefix))));
            }
            catch (error) {
                reject(error);
            }
        });
    };
    /**
     * Removes the entry specified by the given key.
     * @param key     Key identifying the entry to remove.
     * @param prefix  Optional prefix to overwrite the configured one.
     */
    PromisableService.prototype.remove = function (key, prefix) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                localStorage.removeItem(constructKey(key, prefix, _this.configuration.prefix));
                resolve(true);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    /**
     * Clears all entries of the applications local storage.
     */
    PromisableService.prototype.clear = function () {
        return new Promise(function (resolve, reject) {
            try {
                localStorage.clear();
                resolve(true);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    return PromisableService;
}());
export { PromisableService };
//# sourceMappingURL=promisable.service.js.map