{"version":3,"file":"storage-event.service.js","sourceRoot":"ng://ngx-localstorage/","sources":["lib/services/storage-event.service.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAa,MAAM,eAAe,CAAC;AACtD,OAAO,EAAE,SAAS,IAAI,mBAAmB,EAAE,eAAe,EAA4B,MAAM,MAAM,CAAC;AACnG,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;;AAE/C;;GAEG;AAEH;IAKE;;OAEG;IACH;QAAA,iBAGC;QATgB,iBAAY,GAAkC,IAAI,eAAe,CAAe,IAAI,CAAC,CAAC;QAOrG,IAAI,CAAC,YAAY,GAAG,mBAAmB,CAAC,MAAM,EAAE,SAAS,CAAC;aACvD,SAAS,CAAC,UAAC,EAAgB,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,EAA1B,CAA0B,CAAC,CAAC;IACjE,CAAC;IAKD,sBAAW,uCAAM;QAHjB;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,YAAY;iBACrB,YAAY,EAAE,CAAC,IAAI,CAClB,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,CAAC,CAAC,EAAE,EAAJ,CAAI,CAAC,EAClB,KAAK,EAAE,CACR,CAAC;QACN,CAAC;;;OAAA;IAED;;OAEG;IACI,yCAAW,GAAlB;QACE,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YACpD,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;SACjC;IACH,CAAC;;IA/BU,mBAAmB;QAD/B,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;;OACtB,mBAAmB,CAgC/B;8BAxCD;CAwCC,AAhCD,IAgCC;SAhCY,mBAAmB","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\r\nimport { fromEvent as observableFromEvent, BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { share, filter } from 'rxjs/operators';\r\n\r\n/**\r\n * Provides a service\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class StorageEventService implements OnDestroy {\r\n\r\n  private readonly _eventStream: BehaviorSubject<StorageEvent> = new BehaviorSubject<StorageEvent>(null);\r\n  private readonly subscription: Subscription;\r\n\r\n  /**\r\n   * Create e new instance.\r\n   */\r\n  constructor() {\r\n    this.subscription = observableFromEvent(window, 'storage')\r\n      .subscribe((ev: StorageEvent) => this._eventStream.next(ev));\r\n  }\r\n\r\n  /**\r\n   * Gets a stream of storage events.\r\n   */\r\n  public get stream(): Observable<StorageEvent> {\r\n    return this._eventStream\r\n      .asObservable().pipe(\r\n        filter(ev => !!ev),\r\n        share()\r\n      );\r\n  }\r\n\r\n  /**\r\n   * OnDestroy lifecycle hook. Clears the subscription.\r\n   */\r\n  public ngOnDestroy(): void {\r\n    if (!!this.subscription && !this.subscription.closed) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n"]}