import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { fromEvent as observableFromEvent, BehaviorSubject } from 'rxjs';
import { share, filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * Provides a service
 */
var StorageEventService = /** @class */ (function () {
    /**
     * Create e new instance.
     */
    function StorageEventService() {
        var _this = this;
        this._eventStream = new BehaviorSubject(null);
        this.subscription = observableFromEvent(window, 'storage')
            .subscribe(function (ev) { return _this._eventStream.next(ev); });
    }
    Object.defineProperty(StorageEventService.prototype, "stream", {
        /**
         * Gets a stream of storage events.
         */
        get: function () {
            return this._eventStream
                .asObservable().pipe(filter(function (ev) { return !!ev; }), share());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * OnDestroy lifecycle hook. Clears the subscription.
     */
    StorageEventService.prototype.ngOnDestroy = function () {
        if (!!this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    };
    StorageEventService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StorageEventService_Factory() { return new StorageEventService(); }, token: StorageEventService, providedIn: "root" });
    StorageEventService = __decorate([
        Injectable({ providedIn: 'root' }),
        __metadata("design:paramtypes", [])
    ], StorageEventService);
    return StorageEventService;
}());
export { StorageEventService };
//# sourceMappingURL=storage-event.service.js.map