import { __decorate, __metadata } from "tslib";
import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Output } from '@angular/core';
import { fromEvent as observableFromEvent } from 'rxjs';
import { debounceTime, filter } from 'rxjs/operators';
import { getProperty, setProperty } from '../utils';
import { LocalStorageService } from '../services/ngx-localstorage.service';
import { StorageEventService } from '../services/storage-event.service';
/**
 * Provide a directive to directly interact with stored values.
 */
var LocalStorageDirective = /** @class */ (function () {
    /**
     * Creates a new instance.
     */
    function LocalStorageDirective(er, lss, es) {
        var _this = this;
        this.er = er;
        this.lss = lss;
        this.es = es;
        /**
         * An optional debounce for storage write access after value changes.
         */
        this.lsDebounce = 0;
        /**
         * Flag if the bound elements value should be initialized from storage.
         */
        this.lsInitFromStorage = false;
        /**
         * Event which gets fired when a bound value got stored.
         */
        this.lsStoredValue = new EventEmitter();
        this._valuePath = [];
        this.es.stream.pipe(
        // TODO: filter should be more accurate
        filter(function (ev) { return ev.key && ev.key.indexOf(_this.lsKey) >= 0; }))
            .subscribe(function (ev) {
            setProperty(_this._valuePath.length ? _this._valuePath : ['value'], ev.newValue, _this.er.nativeElement, _this.lsFalsyTransformer);
        });
    }
    Object.defineProperty(LocalStorageDirective.prototype, "lsValuePath", {
        /**
         * Provides a path to access the bound elements value property.
         */
        set: function (path) {
            if (path != null) {
                this._valuePath = Array.isArray(path) ? path : path.split(',');
            }
            else {
                this._valuePath = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * AfterViewInit lifecycle hook.
     */
    LocalStorageDirective.prototype.ngAfterViewInit = function () {
        this._initKey();
        this._initFromStorage();
        this._hookEvent();
    };
    /**
     * Initalizes the from either the given value or the elements id or name property.
     */
    LocalStorageDirective.prototype._initKey = function () {
        if (!this.lsKey) {
            if (!this.er.nativeElement.id && !this.er.nativeElement.name) {
                throw new Error('No key or element id or name supplied!');
            }
            this.lsKey = this.er.nativeElement.id || this.er.nativeElement.name;
        }
    };
    /**
     * Hooks onto the elements given event to perform storage write on value changes.
     */
    LocalStorageDirective.prototype._hookEvent = function () {
        var _this = this;
        if (this.lsEvent) {
            this._eventSubscription = observableFromEvent(this.er.nativeElement, this.lsEvent).pipe(debounceTime(this.lsDebounce))
                .subscribe(function () {
                _this.lss.asPromisable().set(_this.lsKey, getProperty(_this._valuePath.length ? _this._valuePath : ['value'], _this.er.nativeElement), _this.lsPrefix)
                    .then(function () {
                    _this.lss.asPromisable().get(_this.lsKey, _this.lsPrefix)
                        .then(function (value) {
                        _this.lsStoredValue.emit(value);
                    })
                        .catch(function (err) { return console.error(err); });
                })
                    .catch(function (err) { return console.error(err); });
            });
        }
    };
    /**
     * Initializes the elements value from storage.
     */
    LocalStorageDirective.prototype._initFromStorage = function () {
        var _this = this;
        if (this.lsInitFromStorage) {
            this.lss.asPromisable().get(this.lsKey, this.lsPrefix)
                .then(function (storedValue) {
                setProperty(_this._valuePath.length ? _this._valuePath : ['value'], storedValue, _this.er.nativeElement, _this.lsFalsyTransformer);
            })
                .catch(function (err) { return console.error(err); });
        }
    };
    /**
     * Unsubscribe from event observable.
     */
    LocalStorageDirective.prototype.ngOnDestroy = function () {
        if (this._eventSubscription && !this._eventSubscription.closed) {
            this._eventSubscription.unsubscribe();
        }
    };
    LocalStorageDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: LocalStorageService },
        { type: StorageEventService }
    ]; };
    __decorate([
        Input('ngxLocalStorage'),
        __metadata("design:type", String)
    ], LocalStorageDirective.prototype, "lsKey", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], LocalStorageDirective.prototype, "lsPrefix", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], LocalStorageDirective.prototype, "lsEvent", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LocalStorageDirective.prototype, "lsDebounce", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LocalStorageDirective.prototype, "lsInitFromStorage", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], LocalStorageDirective.prototype, "lsFalsyTransformer", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], LocalStorageDirective.prototype, "lsValuePath", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], LocalStorageDirective.prototype, "lsStoredValue", void 0);
    LocalStorageDirective = __decorate([
        Directive({
            selector: '[ngxLocalStorage]'
        }),
        __metadata("design:paramtypes", [ElementRef,
            LocalStorageService,
            StorageEventService])
    ], LocalStorageDirective);
    return LocalStorageDirective;
}());
export { LocalStorageDirective };
//# sourceMappingURL=ngx-localstorage.directive.js.map