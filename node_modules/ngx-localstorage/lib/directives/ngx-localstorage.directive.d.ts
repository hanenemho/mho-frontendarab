import { AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { LocalStorageService } from '../services/ngx-localstorage.service';
import { StorageEventService } from '../services/storage-event.service';
/**
 * Provide a directive to directly interact with stored values.
 */
import * as ɵngcc0 from '@angular/core';
export declare class LocalStorageDirective implements AfterViewInit, OnDestroy {
    private readonly er;
    private readonly lss;
    private readonly es;
    /**
     * The key to use with localstorage.
     */
    lsKey: string;
    /**
     * The keys prefix to use.
     */
    lsPrefix: string;
    /**
     * The event to hook onto value changes.
     */
    lsEvent: string;
    /**
     * An optional debounce for storage write access after value changes.
     */
    lsDebounce: number;
    /**
     * Flag if the bound elements value should be initialized from storage.
     */
    lsInitFromStorage: boolean;
    /**
     * An optional transformer to handle falsy values.
     */
    lsFalsyTransformer?: () => any;
    /**
     * Provides a path to access the bound elements value property.
     */
    set lsValuePath(path: any[] | string);
    /**
     * Event which gets fired when a bound value got stored.
     */
    lsStoredValue: EventEmitter<any>;
    private _eventSubscription;
    private _valuePath;
    /**
     * Creates a new instance.
     */
    constructor(er: ElementRef, lss: LocalStorageService, es: StorageEventService);
    /**
     * AfterViewInit lifecycle hook.
     */
    ngAfterViewInit(): void;
    /**
     * Initalizes the from either the given value or the elements id or name property.
     */
    private _initKey;
    /**
     * Hooks onto the elements given event to perform storage write on value changes.
     */
    private _hookEvent;
    /**
     * Initializes the elements value from storage.
     */
    private _initFromStorage;
    /**
     * Unsubscribe from event observable.
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LocalStorageDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LocalStorageDirective, "[ngxLocalStorage]", never, { "lsDebounce": "lsDebounce"; "lsInitFromStorage": "lsInitFromStorage"; "lsValuePath": "lsValuePath"; "lsKey": "ngxLocalStorage"; "lsPrefix": "lsPrefix"; "lsEvent": "lsEvent"; "lsFalsyTransformer": "lsFalsyTransformer"; }, { "lsStoredValue": "lsStoredValue"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvY2Fsc3RvcmFnZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibmd4LWxvY2Fsc3RvcmFnZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMb2NhbFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbmd4LWxvY2Fsc3RvcmFnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3RvcmFnZUV2ZW50U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3N0b3JhZ2UtZXZlbnQuc2VydmljZSc7XHJcbi8qKlxyXG4gKiBQcm92aWRlIGEgZGlyZWN0aXZlIHRvIGRpcmVjdGx5IGludGVyYWN0IHdpdGggc3RvcmVkIHZhbHVlcy5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExvY2FsU3RvcmFnZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVyO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBsc3M7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUga2V5IHRvIHVzZSB3aXRoIGxvY2Fsc3RvcmFnZS5cclxuICAgICAqL1xyXG4gICAgbHNLZXk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGtleXMgcHJlZml4IHRvIHVzZS5cclxuICAgICAqL1xyXG4gICAgbHNQcmVmaXg6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGV2ZW50IHRvIGhvb2sgb250byB2YWx1ZSBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBsc0V2ZW50OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEFuIG9wdGlvbmFsIGRlYm91bmNlIGZvciBzdG9yYWdlIHdyaXRlIGFjY2VzcyBhZnRlciB2YWx1ZSBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBsc0RlYm91bmNlOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEZsYWcgaWYgdGhlIGJvdW5kIGVsZW1lbnRzIHZhbHVlIHNob3VsZCBiZSBpbml0aWFsaXplZCBmcm9tIHN0b3JhZ2UuXHJcbiAgICAgKi9cclxuICAgIGxzSW5pdEZyb21TdG9yYWdlOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvcHRpb25hbCB0cmFuc2Zvcm1lciB0byBoYW5kbGUgZmFsc3kgdmFsdWVzLlxyXG4gICAgICovXHJcbiAgICBsc0ZhbHN5VHJhbnNmb3JtZXI/OiAoKSA9PiBhbnk7XHJcbiAgICAvKipcclxuICAgICAqIFByb3ZpZGVzIGEgcGF0aCB0byBhY2Nlc3MgdGhlIGJvdW5kIGVsZW1lbnRzIHZhbHVlIHByb3BlcnR5LlxyXG4gICAgICovXHJcbiAgICBzZXQgbHNWYWx1ZVBhdGgocGF0aDogYW55W10gfCBzdHJpbmcpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCB3aGljaCBnZXRzIGZpcmVkIHdoZW4gYSBib3VuZCB2YWx1ZSBnb3Qgc3RvcmVkLlxyXG4gICAgICovXHJcbiAgICBsc1N0b3JlZFZhbHVlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIHByaXZhdGUgX2V2ZW50U3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBfdmFsdWVQYXRoO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihlcjogRWxlbWVudFJlZiwgbHNzOiBMb2NhbFN0b3JhZ2VTZXJ2aWNlLCBlczogU3RvcmFnZUV2ZW50U2VydmljZSk7XHJcbiAgICAvKipcclxuICAgICAqIEFmdGVyVmlld0luaXQgbGlmZWN5Y2xlIGhvb2suXHJcbiAgICAgKi9cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0YWxpemVzIHRoZSBmcm9tIGVpdGhlciB0aGUgZ2l2ZW4gdmFsdWUgb3IgdGhlIGVsZW1lbnRzIGlkIG9yIG5hbWUgcHJvcGVydHkuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2luaXRLZXk7XHJcbiAgICAvKipcclxuICAgICAqIEhvb2tzIG9udG8gdGhlIGVsZW1lbnRzIGdpdmVuIGV2ZW50IHRvIHBlcmZvcm0gc3RvcmFnZSB3cml0ZSBvbiB2YWx1ZSBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9ob29rRXZlbnQ7XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIHRoZSBlbGVtZW50cyB2YWx1ZSBmcm9tIHN0b3JhZ2UuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2luaXRGcm9tU3RvcmFnZTtcclxuICAgIC8qKlxyXG4gICAgICogVW5zdWJzY3JpYmUgZnJvbSBldmVudCBvYnNlcnZhYmxlLlxyXG4gICAgICovXHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==