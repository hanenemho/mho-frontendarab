import { AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { LocalStorageService } from '../services/ngx-localstorage.service';
import { StorageEventService } from '../services/storage-event.service';
/**
 * Provide a directive to directly interact with stored values.
 */
export declare class LocalStorageDirective implements AfterViewInit, OnDestroy {
    private readonly er;
    private readonly lss;
    private readonly es;
    /**
     * The key to use with localstorage.
     */
    lsKey: string;
    /**
     * The keys prefix to use.
     */
    lsPrefix: string;
    /**
     * The event to hook onto value changes.
     */
    lsEvent: string;
    /**
     * An optional debounce for storage write access after value changes.
     */
    lsDebounce: number;
    /**
     * Flag if the bound elements value should be initialized from storage.
     */
    lsInitFromStorage: boolean;
    /**
     * An optional transformer to handle falsy values.
     */
    lsFalsyTransformer?: () => any;
    /**
     * Provides a path to access the bound elements value property.
     */
    set lsValuePath(path: any[] | string);
    /**
     * Event which gets fired when a bound value got stored.
     */
    lsStoredValue: EventEmitter<any>;
    private _eventSubscription;
    private _valuePath;
    /**
     * Creates a new instance.
     */
    constructor(er: ElementRef, lss: LocalStorageService, es: StorageEventService);
    /**
     * AfterViewInit lifecycle hook.
     */
    ngAfterViewInit(): void;
    /**
     * Initalizes the from either the given value or the elements id or name property.
     */
    private _initKey;
    /**
     * Hooks onto the elements given event to perform storage write on value changes.
     */
    private _hookEvent;
    /**
     * Initializes the elements value from storage.
     */
    private _initFromStorage;
    /**
     * Unsubscribe from event observable.
     */
    ngOnDestroy(): void;
}
