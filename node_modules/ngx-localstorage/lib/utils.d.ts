import { NgxLocalstorageConfiguration } from './interfaces/storage-configuration';
import { StorageSerializer } from './interfaces/storage-serializer';
/**
 * Gets an objects property based on its path.
 * @param path Path to the property
 * @param object Object to access
 */
export declare const getProperty: (path: string[], object: any) => any;
/**
 * Sets an objects property based on its path.
 * @param path Path to the property
 * @param value Value to set
 * @param object Object whose value to set
 * @param falsyTransformer optional transformer handling falsy values
 */
export declare const setProperty: (path: string[] | string, value: any, object: any, falsyTransformer?: () => any) => void;
/**
 * Constructs the storage key based on a prefix - if given - and the key itself
 */
export declare const constructKey: (key: string, prefix?: string, configuredPrefix?: string) => string;
/**
 * The librarys default config.
 */
export declare const defaultConfig: NgxLocalstorageConfiguration;
/**
 * StorageSerializer Guard
 */
export declare const isSerializer: (prefixOrSerializer: string | StorageSerializer) => prefixOrSerializer is StorageSerializer<any>;
