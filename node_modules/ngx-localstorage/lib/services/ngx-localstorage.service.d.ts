import { NgxLocalstorageConfiguration } from '../interfaces/storage-configuration';
import { PromisableService } from './promisable.service';
import { StorageSerializer } from '../interfaces/storage-serializer';
/**
 * Provides a service to access the localstorage.
 */
import * as ɵngcc0 from '@angular/core';
export declare class LocalStorageService {
    private readonly defaultSerializer;
    readonly config?: NgxLocalstorageConfiguration;
    private readonly promisable;
    /**
     * Creates a new instance.
     */
    constructor(defaultSerializer: StorageSerializer, config?: NgxLocalstorageConfiguration);
    /**
     * Returns a service variant based on Promises.
     */
    asPromisable(): PromisableService;
    /**
     * Gets the number of entries in the applications local storage.
     */
    count(): number | undefined;
    /**
     * Returns the nth (defined by the index parameter) key in the storage.
     * The order of keys is user-agent defined, so you should not rely on it.
     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
     */
    getKey(index: number): string | null | undefined;
    /**
     * Adds the value with the given key or updates an existing entry.
     * @param key     Key to store.
     * @param value   Value to store.
     * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.
     */
    set(key: string, value: any, prefixOrSerializer?: string | StorageSerializer): void;
    /**
     * Adds the value with the given key or updates an existing entry.
     * @param key     Key to store.
     * @param value   Value to store.
     * @param prefixOrSerializer  prefix or serializer to overwrite the configured one.
     */
    set(key: string, value: any, prefixOrSerializer: string | StorageSerializer): void;
    /**
     * Adds the value with the given key or updates an existing entry.
     * @param key     Key to store.
     * @param value   Value to store.
     * @param prefix  Optional prefix to overwrite the configured one.
     * @param serializer  Optional serilizer.
     */
    set(key: string, value: any, prefix: string, serializer: StorageSerializer): void;
    /**
     * Gets the entry specified by the given key or null.
     * @param key     Key identifying the wanted entry.
     * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.
     * @param serializer  Optional serilizer.
     */
    get(key: string, prefixOrSerializer?: string | StorageSerializer): any | null | undefined;
    /**
     * Gets the entry specified by the given key or null.
     * @param key     Key identifying the wanted entry.
     * @param prefixOrSerializer  prefix or serializer to overwrite the configured one.
     */
    get(key: string, prefixOrSerializer: string | StorageSerializer): any | null | undefined;
    /**
     * Gets the entry specified by the given key or null.
     * @param key     Key identifying the wanted entry.
     * @param prefix  prefix or serializer to overwrite the configured one.
     * @param serializer serilizer.
     */
    get(key: string, prefix: string, serializer: StorageSerializer): any | null | undefined;
    /**
     * Removes the entry specified by the given key.
     * @param key     Key identifying the entry to remove.
     * @param prefix  Optional prefix to overwrite the configured one.
     */
    remove(key: string, prefix?: string): void;
    /**
     * Clears all entries of the applications local storage.
     */
    clear(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LocalStorageService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvY2Fsc3RvcmFnZS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm5neC1sb2NhbHN0b3JhZ2Uuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmd4TG9jYWxzdG9yYWdlQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvc3RvcmFnZS1jb25maWd1cmF0aW9uJztcclxuaW1wb3J0IHsgUHJvbWlzYWJsZVNlcnZpY2UgfSBmcm9tICcuL3Byb21pc2FibGUuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZXJpYWxpemVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9zdG9yYWdlLXNlcmlhbGl6ZXInO1xyXG4vKipcclxuICogUHJvdmlkZXMgYSBzZXJ2aWNlIHRvIGFjY2VzcyB0aGUgbG9jYWxzdG9yYWdlLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTG9jYWxTdG9yYWdlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRTZXJpYWxpemVyO1xyXG4gICAgcmVhZG9ubHkgY29uZmlnPzogTmd4TG9jYWxzdG9yYWdlQ29uZmlndXJhdGlvbjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvbWlzYWJsZTtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZGVmYXVsdFNlcmlhbGl6ZXI6IFN0b3JhZ2VTZXJpYWxpemVyLCBjb25maWc/OiBOZ3hMb2NhbHN0b3JhZ2VDb25maWd1cmF0aW9uKTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHNlcnZpY2UgdmFyaWFudCBiYXNlZCBvbiBQcm9taXNlcy5cclxuICAgICAqL1xyXG4gICAgYXNQcm9taXNhYmxlKCk6IFByb21pc2FibGVTZXJ2aWNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgZW50cmllcyBpbiB0aGUgYXBwbGljYXRpb25zIGxvY2FsIHN0b3JhZ2UuXHJcbiAgICAgKi9cclxuICAgIGNvdW50KCk6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgbnRoIChkZWZpbmVkIGJ5IHRoZSBpbmRleCBwYXJhbWV0ZXIpIGtleSBpbiB0aGUgc3RvcmFnZS5cclxuICAgICAqIFRoZSBvcmRlciBvZiBrZXlzIGlzIHVzZXItYWdlbnQgZGVmaW5lZCwgc28geW91IHNob3VsZCBub3QgcmVseSBvbiBpdC5cclxuICAgICAqIEBwYXJhbSBpbmRleCAgIEFuIGludGVnZXIgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgb2YgdGhlIGtleSB5b3Ugd2FudCB0byBnZXQgdGhlIG5hbWUgb2YuIFRoaXMgaXMgYSB6ZXJvLWJhc2VkIGluZGV4LlxyXG4gICAgICovXHJcbiAgICBnZXRLZXkoaW5kZXg6IG51bWJlcik6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIHZhbHVlIHdpdGggdGhlIGdpdmVuIGtleSBvciB1cGRhdGVzIGFuIGV4aXN0aW5nIGVudHJ5LlxyXG4gICAgICogQHBhcmFtIGtleSAgICAgS2V5IHRvIHN0b3JlLlxyXG4gICAgICogQHBhcmFtIHZhbHVlICAgVmFsdWUgdG8gc3RvcmUuXHJcbiAgICAgKiBAcGFyYW0gcHJlZml4T3JTZXJpYWxpemVyICBPcHRpb25hbCBwcmVmaXggb3Igc2VyaWFsaXplciB0byBvdmVyd3JpdGUgdGhlIGNvbmZpZ3VyZWQgb25lLlxyXG4gICAgICovXHJcbiAgICBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIHByZWZpeE9yU2VyaWFsaXplcj86IHN0cmluZyB8IFN0b3JhZ2VTZXJpYWxpemVyKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgdmFsdWUgd2l0aCB0aGUgZ2l2ZW4ga2V5IG9yIHVwZGF0ZXMgYW4gZXhpc3RpbmcgZW50cnkuXHJcbiAgICAgKiBAcGFyYW0ga2V5ICAgICBLZXkgdG8gc3RvcmUuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgICBWYWx1ZSB0byBzdG9yZS5cclxuICAgICAqIEBwYXJhbSBwcmVmaXhPclNlcmlhbGl6ZXIgIHByZWZpeCBvciBzZXJpYWxpemVyIHRvIG92ZXJ3cml0ZSB0aGUgY29uZmlndXJlZCBvbmUuXHJcbiAgICAgKi9cclxuICAgIHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgcHJlZml4T3JTZXJpYWxpemVyOiBzdHJpbmcgfCBTdG9yYWdlU2VyaWFsaXplcik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIHZhbHVlIHdpdGggdGhlIGdpdmVuIGtleSBvciB1cGRhdGVzIGFuIGV4aXN0aW5nIGVudHJ5LlxyXG4gICAgICogQHBhcmFtIGtleSAgICAgS2V5IHRvIHN0b3JlLlxyXG4gICAgICogQHBhcmFtIHZhbHVlICAgVmFsdWUgdG8gc3RvcmUuXHJcbiAgICAgKiBAcGFyYW0gcHJlZml4ICBPcHRpb25hbCBwcmVmaXggdG8gb3ZlcndyaXRlIHRoZSBjb25maWd1cmVkIG9uZS5cclxuICAgICAqIEBwYXJhbSBzZXJpYWxpemVyICBPcHRpb25hbCBzZXJpbGl6ZXIuXHJcbiAgICAgKi9cclxuICAgIHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgcHJlZml4OiBzdHJpbmcsIHNlcmlhbGl6ZXI6IFN0b3JhZ2VTZXJpYWxpemVyKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgZW50cnkgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBrZXkgb3IgbnVsbC5cclxuICAgICAqIEBwYXJhbSBrZXkgICAgIEtleSBpZGVudGlmeWluZyB0aGUgd2FudGVkIGVudHJ5LlxyXG4gICAgICogQHBhcmFtIHByZWZpeE9yU2VyaWFsaXplciAgT3B0aW9uYWwgcHJlZml4IG9yIHNlcmlhbGl6ZXIgdG8gb3ZlcndyaXRlIHRoZSBjb25maWd1cmVkIG9uZS5cclxuICAgICAqIEBwYXJhbSBzZXJpYWxpemVyICBPcHRpb25hbCBzZXJpbGl6ZXIuXHJcbiAgICAgKi9cclxuICAgIGdldChrZXk6IHN0cmluZywgcHJlZml4T3JTZXJpYWxpemVyPzogc3RyaW5nIHwgU3RvcmFnZVNlcmlhbGl6ZXIpOiBhbnkgfCBudWxsIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBlbnRyeSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIGtleSBvciBudWxsLlxyXG4gICAgICogQHBhcmFtIGtleSAgICAgS2V5IGlkZW50aWZ5aW5nIHRoZSB3YW50ZWQgZW50cnkuXHJcbiAgICAgKiBAcGFyYW0gcHJlZml4T3JTZXJpYWxpemVyICBwcmVmaXggb3Igc2VyaWFsaXplciB0byBvdmVyd3JpdGUgdGhlIGNvbmZpZ3VyZWQgb25lLlxyXG4gICAgICovXHJcbiAgICBnZXQoa2V5OiBzdHJpbmcsIHByZWZpeE9yU2VyaWFsaXplcjogc3RyaW5nIHwgU3RvcmFnZVNlcmlhbGl6ZXIpOiBhbnkgfCBudWxsIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBlbnRyeSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIGtleSBvciBudWxsLlxyXG4gICAgICogQHBhcmFtIGtleSAgICAgS2V5IGlkZW50aWZ5aW5nIHRoZSB3YW50ZWQgZW50cnkuXHJcbiAgICAgKiBAcGFyYW0gcHJlZml4ICBwcmVmaXggb3Igc2VyaWFsaXplciB0byBvdmVyd3JpdGUgdGhlIGNvbmZpZ3VyZWQgb25lLlxyXG4gICAgICogQHBhcmFtIHNlcmlhbGl6ZXIgc2VyaWxpemVyLlxyXG4gICAgICovXHJcbiAgICBnZXQoa2V5OiBzdHJpbmcsIHByZWZpeDogc3RyaW5nLCBzZXJpYWxpemVyOiBTdG9yYWdlU2VyaWFsaXplcik6IGFueSB8IG51bGwgfCB1bmRlZmluZWQ7XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgdGhlIGVudHJ5IHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4ga2V5LlxyXG4gICAgICogQHBhcmFtIGtleSAgICAgS2V5IGlkZW50aWZ5aW5nIHRoZSBlbnRyeSB0byByZW1vdmUuXHJcbiAgICAgKiBAcGFyYW0gcHJlZml4ICBPcHRpb25hbCBwcmVmaXggdG8gb3ZlcndyaXRlIHRoZSBjb25maWd1cmVkIG9uZS5cclxuICAgICAqL1xyXG4gICAgcmVtb3ZlKGtleTogc3RyaW5nLCBwcmVmaXg/OiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgYWxsIGVudHJpZXMgb2YgdGhlIGFwcGxpY2F0aW9ucyBsb2NhbCBzdG9yYWdlLlxyXG4gICAgICovXHJcbiAgICBjbGVhcigpOiB2b2lkO1xyXG59XHJcbiJdfQ==