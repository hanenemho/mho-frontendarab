import { NgxLocalstorageConfiguration } from '../interfaces/storage-configuration';
import { StorageSerializer } from '../interfaces/storage-serializer';
/**
 * Provides a Promise based service to access the localstorage.
 */
export declare class PromisableService {
    private readonly configuration;
    private readonly defaultSerializer;
    /**
     * Creates a new instance
     */
    constructor(configuration: NgxLocalstorageConfiguration, defaultSerializer: StorageSerializer);
    /**
     * Gets the number of entries in the applications local storage.
     */
    count(): Promise<number>;
    /**
     * Returns the nth (defined by the index parameter) key in the storage.
     * The order of keys is user-agent defined, so you should not rely on it.
     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
     */
    getKey(index: number): Promise<string | null>;
    /**
     * Adds the value with the given key or updates an existing entry.
     * @param key     Key to store.
     * @param value   Value to store.
     * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.
     * @param serializer  Optional serilizer.
     */
    set(key: string, value: any, prefixOrSerializer?: string | StorageSerializer): Promise<boolean>;
    set(key: string, value: any, prefixOrSerializer: string | StorageSerializer): Promise<boolean>;
    set(key: string, value: any, prefixOrSerializer: string, serializer: StorageSerializer): Promise<boolean>;
    /**
     * Gets the entry specified by the given key or null.
     * @param key     Key identifying the wanted entry.
     * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.
     * @param serializer  Optional serilizer.
     */
    get(key: string, prefixOrSerializer?: string | StorageSerializer): Promise<any | null | undefined>;
    get(key: string, prefixOrSerializer: string | StorageSerializer): Promise<any | null | undefined>;
    get(key: string, prefixOrSerializer: string, serializer: StorageSerializer): Promise<any | null | undefined>;
    /**
     * Removes the entry specified by the given key.
     * @param key     Key identifying the entry to remove.
     * @param prefix  Optional prefix to overwrite the configured one.
     */
    remove(key: string, prefix?: string): Promise<boolean>;
    /**
     * Clears all entries of the applications local storage.
     */
    clear(): Promise<boolean>;
}
