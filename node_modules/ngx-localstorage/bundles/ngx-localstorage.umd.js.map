{"version":3,"file":"ngx-localstorage.umd.js","sources":["../../../../libs/ngx-localstorage/src/lib/utils.ts","../../../../libs/ngx-localstorage/src/lib/services/promisable.service.ts","../../../../libs/ngx-localstorage/src/lib/tokens/storage-config.ts","../../../../libs/ngx-localstorage/src/lib/tokens/storage-serializer.ts","../../../../libs/ngx-localstorage/src/lib/services/ngx-localstorage.service.ts","../../../../libs/ngx-localstorage/src/lib/services/storage-event.service.ts","../../../../libs/ngx-localstorage/src/lib/directives/ngx-localstorage.directive.ts","../../../../libs/ngx-localstorage/src/lib/classes/default-serializer.ts","../../../../libs/ngx-localstorage/src/lib/ngx-localstorage.module.ts","../../../../libs/ngx-localstorage/src/lib/decorators.ts","../../../../libs/ngx-localstorage/src/index.ts","../../../../libs/ngx-localstorage/src/ngx-localstorage.ts"],"sourcesContent":["import { NgxLocalstorageConfiguration } from './interfaces/storage-configuration';\r\nimport { StorageSerializer } from './interfaces/storage-serializer';\r\n\r\n/**\r\n * Gets an objects property based on its path.\r\n * @param path Path to the property\r\n * @param object Object to access\r\n */\r\nexport const getProperty = (path: string[], object: any) =>\r\n  path.reduce((obj: any, p: any) => (!!obj) ? obj[p] : null, object);\r\n\r\n/**\r\n * Sets an objects property based on its path.\r\n * @param path Path to the property\r\n * @param value Value to set\r\n * @param object Object whose value to set\r\n * @param falsyTransformer optional transformer handling falsy values\r\n */\r\nexport const setProperty = (path: string[] | string, value: any, object: any, falsyTransformer?: () => any) => {\r\n  const lastKeyIndex = path.length - 1;\r\n  for (let i = 0; i < lastKeyIndex; ++i) {\r\n    const key = path[i];\r\n    if (!(key in object)) {\r\n      object[key] = {};\r\n    }\r\n    object = object[key];\r\n  }\r\n  object[path[lastKeyIndex]] = (!value || (typeof value === 'string' && value === 'false'))\r\n    && !!falsyTransformer ? falsyTransformer() : value;\r\n};\r\n\r\n/**\r\n * Constructs the storage key based on a prefix - if given - and the key itself\r\n */\r\nexport const constructKey = (key: string, prefix?: string, configuredPrefix?: string): string => {\r\n  const prefixToUse = prefix || configuredPrefix;\r\n  if (prefixToUse) {\r\n    return `${prefixToUse}_${key}`;\r\n  }\r\n  return key;\r\n}\r\n\r\n/**\r\n * The librarys default config.\r\n */\r\nexport const defaultConfig: NgxLocalstorageConfiguration = {\r\n  allowNull: true\r\n};\r\n\r\n/**\r\n * StorageSerializer Guard\r\n */\r\nexport const isSerializer = (prefixOrSerializer: string | StorageSerializer): prefixOrSerializer is StorageSerializer => {\r\n  return !!prefixOrSerializer && (prefixOrSerializer as StorageSerializer).serialize !== undefined;\r\n}\r\n","import { NgxLocalstorageConfiguration } from '../interfaces/storage-configuration';\r\nimport { StorageSerializer } from '../interfaces/storage-serializer';\r\nimport { constructKey, isSerializer } from '../utils';\r\n\r\n/**\r\n * Provides a Promise based service to access the localstorage.\r\n */\r\nexport class PromisableService {\r\n\r\n  /**\r\n   * Creates a new instance\r\n   */\r\n  constructor(\r\n    private readonly configuration: NgxLocalstorageConfiguration,\r\n    private readonly defaultSerializer: StorageSerializer\r\n  ) { }\r\n\r\n  /**\r\n   * Gets the number of entries in the applications local storage.\r\n   */\r\n  public count(): Promise<number> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        resolve(localStorage.length);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the nth (defined by the index parameter) key in the storage.\r\n   * The order of keys is user-agent defined, so you should not rely on it.\r\n   * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.\r\n   */\r\n  public getKey(index: number): Promise<string | null> {\r\n    return new Promise<string | null>((resolve, reject) => {\r\n      if (index < 0) {\r\n        reject(new Error('index has to be 0 or greater'));\r\n      }\r\n      try {\r\n        resolve(localStorage.key(index));\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds the value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public set(key: string, value: any, prefixOrSerializer?: string | StorageSerializer): Promise<boolean>;\r\n  public set(key: string, value: any, prefixOrSerializer: string | StorageSerializer): Promise<boolean>;\r\n  public set(key: string, value: any, prefixOrSerializer: string, serializer: StorageSerializer): Promise<boolean>;\r\n  public set(key: string, value: any, prefixOrSerializer?: string | StorageSerializer, serializer?: StorageSerializer): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n\r\n        const prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;\r\n        serializer = isSerializer(prefixOrSerializer)\r\n          ? (prefixOrSerializer as StorageSerializer)\r\n          : !!serializer\r\n            ? serializer\r\n            : this.defaultSerializer;\r\n\r\n        if (this.configuration.allowNull\r\n          || (!this.configuration.allowNull && value !== 'null' && value !== null && value !== undefined)) {\r\n          localStorage.setItem(constructKey(key, prefix, this.configuration.prefix), serializer.serialize(value));\r\n        } else {\r\n          return this.remove(key, prefix);\r\n        }\r\n        resolve(true);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public get(key: string, prefixOrSerializer?: string | StorageSerializer): Promise<any | null | undefined>;\r\n  public get(key: string, prefixOrSerializer: string | StorageSerializer): Promise<any | null | undefined>;\r\n  public get(key: string, prefixOrSerializer: string, serializer: StorageSerializer): Promise<any | null | undefined>;\r\n  public get(key: string, prefixOrSerializer?: string | StorageSerializer, serializer?: StorageSerializer): Promise<any | null | undefined> {\r\n    return new Promise<any | null | undefined>((resolve, reject) => {\r\n      try {\r\n\r\n        const prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;\r\n        serializer = isSerializer(prefixOrSerializer)\r\n          ? (prefixOrSerializer as StorageSerializer)\r\n          : !!serializer\r\n            ? serializer\r\n            : this.defaultSerializer;\r\n\r\n        resolve(serializer.deserialize(localStorage.getItem(constructKey(key, prefix, this.configuration.prefix))));\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes the entry specified by the given key.\r\n   * @param key     Key identifying the entry to remove.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   */\r\n  public remove(key: string, prefix?: string): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        localStorage.removeItem(constructKey(key, prefix, this.configuration.prefix));\r\n        resolve(true);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clears all entries of the applications local storage.\r\n   */\r\n  public clear(): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        localStorage.clear();\r\n        resolve(true);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { NgxLocalstorageConfiguration } from '../interfaces/storage-configuration';\r\n\r\n/**\r\n * Provides an injection token for the service configuration.\r\n */\r\nexport const NGX_LOCAL_STORAGE_CONFIG = new InjectionToken<NgxLocalstorageConfiguration>('NgxLocalstorageConfiguration');","import { InjectionToken } from '@angular/core';\r\nimport { StorageSerializer } from '../interfaces/storage-serializer';\r\n\r\n/**\r\n * Provides an injection token for the services serializer.\r\n */\r\nexport const NGX_LOCAL_STORAGE_SERIALIZER = new InjectionToken<StorageSerializer>('StorageSerializer');","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NgxLocalstorageConfiguration } from '../interfaces/storage-configuration';\r\nimport { PromisableService } from './promisable.service';\r\nimport { defaultConfig, constructKey, isSerializer } from '../utils';\r\nimport { NGX_LOCAL_STORAGE_CONFIG } from '../tokens/storage-config';\r\nimport { NGX_LOCAL_STORAGE_SERIALIZER } from '../tokens/storage-serializer';\r\nimport { StorageSerializer } from '../interfaces/storage-serializer';\r\n\r\n/**\r\n * Provides a service to access the localstorage.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class LocalStorageService {\r\n\r\n  private readonly promisable: PromisableService;\r\n\r\n  /**\r\n   * Creates a new instance.\r\n   */\r\n  constructor(\r\n    @Inject(NGX_LOCAL_STORAGE_SERIALIZER) private readonly defaultSerializer: StorageSerializer,\r\n    @Inject(NGX_LOCAL_STORAGE_CONFIG) public readonly config?: NgxLocalstorageConfiguration\r\n  ) {\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.promisable = new PromisableService(this.config, this.defaultSerializer);\r\n  }\r\n\r\n  /**\r\n   * Returns a service variant based on Promises.\r\n   */\r\n  public asPromisable(): PromisableService {\r\n    return this.promisable;\r\n  }\r\n\r\n  /**\r\n   * Gets the number of entries in the applications local storage.\r\n   */\r\n  public count(): number | undefined {\r\n    try {\r\n      return localStorage.length;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the nth (defined by the index parameter) key in the storage.\r\n   * The order of keys is user-agent defined, so you should not rely on it.\r\n   * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.\r\n   */\r\n  public getKey(index: number): string | null | undefined {\r\n    if (index < 0) {\r\n      console.error(new Error('index has to be 0 or greater'));\r\n    }\r\n    try {\r\n      return localStorage.key(index);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds the value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   */\r\n  public set(key: string, value: any, prefixOrSerializer?: string | StorageSerializer): void;\r\n  /**\r\n   * Adds the value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefixOrSerializer  prefix or serializer to overwrite the configured one.\r\n   */\r\n  public set(key: string, value: any, prefixOrSerializer: string | StorageSerializer): void;\r\n  /**\r\n   * Adds the value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public set(key: string, value: any, prefix: string, serializer: StorageSerializer): void;\r\n  /**\r\n   * Adds the value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public set(key: string, value: any, prefixOrSerializer?: string | StorageSerializer, serializer?: StorageSerializer): void {\r\n\r\n    const prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;\r\n    serializer = isSerializer(prefixOrSerializer)\r\n      ? (prefixOrSerializer as StorageSerializer)\r\n      : !!serializer\r\n        ? serializer\r\n        : this.defaultSerializer;\r\n\r\n    if (\r\n      this.config.allowNull ||\r\n      (!this.config.allowNull &&\r\n        value !== 'null' &&\r\n        value !== null &&\r\n        value !== undefined)\r\n    ) {\r\n      localStorage.setItem(constructKey(key, prefix, this.config.prefix), serializer.serialize(value));\r\n    } else {\r\n      this.remove(key, constructKey(key, prefix, this.config.prefix));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public get(key: string, prefixOrSerializer?: string | StorageSerializer): any | null | undefined;\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefixOrSerializer  prefix or serializer to overwrite the configured one.\r\n   */\r\n  public get(key: string, prefixOrSerializer: string | StorageSerializer): any | null | undefined;\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefix  prefix or serializer to overwrite the configured one.\r\n   * @param serializer serilizer.\r\n   */\r\n  public get(key: string, prefix: string, serializer: StorageSerializer): any | null | undefined;\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefixOrSerializer  Optional prefix or serializer to overwrite the configured one.\r\n   * @param serializer  Optional serilizer.\r\n   */\r\n  public get(key: string, prefixOrSerializer?: string | StorageSerializer, serializer?: StorageSerializer): any | null | undefined {\r\n\r\n    const prefix = typeof prefixOrSerializer === 'string' ? prefixOrSerializer : undefined;\r\n    serializer = isSerializer(prefixOrSerializer)\r\n      ? (prefixOrSerializer as StorageSerializer)\r\n      : !!serializer\r\n        ? serializer\r\n        : this.defaultSerializer;\r\n\r\n    try {\r\n      return serializer.deserialize(localStorage.getItem(constructKey(key, prefix, this.config.prefix)));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the entry specified by the given key.\r\n   * @param key     Key identifying the entry to remove.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   */\r\n  public remove(key: string, prefix?: string): void {\r\n    try {\r\n      localStorage.removeItem(constructKey(key, prefix, this.config.prefix));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears all entries of the applications local storage.\r\n   */\r\n  public clear(): void {\r\n    try {\r\n      localStorage.clear();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { fromEvent as observableFromEvent, BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { share, filter } from 'rxjs/operators';\r\n\r\n/**\r\n * Provides a service\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class StorageEventService implements OnDestroy {\r\n\r\n  private readonly _eventStream: BehaviorSubject<StorageEvent> = new BehaviorSubject<StorageEvent>(null);\r\n  private readonly subscription: Subscription;\r\n\r\n  /**\r\n   * Create e new instance.\r\n   */\r\n  constructor() {\r\n    this.subscription = observableFromEvent(window, 'storage')\r\n      .subscribe((ev: StorageEvent) => this._eventStream.next(ev));\r\n  }\r\n\r\n  /**\r\n   * Gets a stream of storage events.\r\n   */\r\n  public get stream(): Observable<StorageEvent> {\r\n    return this._eventStream\r\n      .asObservable().pipe(\r\n        filter(ev => !!ev),\r\n        share()\r\n      );\r\n  }\r\n\r\n  /**\r\n   * OnDestroy lifecycle hook. Clears the subscription.\r\n   */\r\n  public ngOnDestroy(): void {\r\n    if (!!this.subscription && !this.subscription.closed) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\r\nimport { fromEvent as observableFromEvent, Subscription } from 'rxjs';\r\nimport { debounceTime, filter } from 'rxjs/operators';\r\n\r\nimport { getProperty, setProperty } from '../utils';\r\nimport { LocalStorageService } from '../services/ngx-localstorage.service';\r\nimport { StorageEventService } from '../services/storage-event.service';\r\n\r\n/**\r\n * Provide a directive to directly interact with stored values.\r\n */\r\n@Directive({\r\n  selector: '[ngxLocalStorage]'\r\n})\r\nexport class LocalStorageDirective implements AfterViewInit, OnDestroy {\r\n\r\n  /**\r\n   * The key to use with localstorage.\r\n   */\r\n  @Input('ngxLocalStorage')\r\n  public lsKey: string;\r\n  /**\r\n   * The keys prefix to use.\r\n   */\r\n  @Input()\r\n  public lsPrefix: string;\r\n  /**\r\n   * The event to hook onto value changes.\r\n   */\r\n  @Input()\r\n  public lsEvent: string;\r\n  /**\r\n   * An optional debounce for storage write access after value changes.\r\n   */\r\n  @Input()\r\n  public lsDebounce = 0;\r\n  /**\r\n   * Flag if the bound elements value should be initialized from storage.\r\n   */\r\n  @Input()\r\n  public lsInitFromStorage = false;\r\n  /**\r\n   * An optional transformer to handle falsy values.\r\n   */\r\n  @Input()\r\n  public lsFalsyTransformer?: () => any;\r\n\r\n  /**\r\n   * Provides a path to access the bound elements value property.\r\n   */\r\n  @Input()\r\n  public set lsValuePath(path: any[] | string) {\r\n    if (path != null) {\r\n      this._valuePath = Array.isArray(path) ? path : path.split(',');\r\n    } else {\r\n      this._valuePath = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event which gets fired when a bound value got stored.\r\n   */\r\n  @Output()\r\n  public lsStoredValue = new EventEmitter<any>();\r\n\r\n  private _eventSubscription: Subscription;\r\n  private _valuePath: string[] = [];\r\n\r\n  /**\r\n   * Creates a new instance.\r\n   */\r\n  constructor(private readonly er: ElementRef,\r\n    private readonly lss: LocalStorageService,\r\n    private readonly es: StorageEventService) {\r\n\r\n    this.es.stream.pipe(\r\n      // TODO: filter should be more accurate\r\n      filter((ev: StorageEvent) => ev.key && ev.key.indexOf(this.lsKey) >= 0)\r\n    )\r\n      .subscribe((ev: StorageEvent) => {\r\n        setProperty(this._valuePath.length ? this._valuePath : ['value'], ev.newValue, this.er.nativeElement, this.lsFalsyTransformer);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * AfterViewInit lifecycle hook.\r\n   */\r\n  public ngAfterViewInit(): void {\r\n    this._initKey();\r\n    this._initFromStorage();\r\n    this._hookEvent();\r\n  }\r\n\r\n  /**\r\n   * Initalizes the from either the given value or the elements id or name property.\r\n   */\r\n  private _initKey(): void {\r\n    if (!this.lsKey) {\r\n      if (!this.er.nativeElement.id && !this.er.nativeElement.name) {\r\n        throw new Error('No key or element id or name supplied!');\r\n      }\r\n      this.lsKey = this.er.nativeElement.id || this.er.nativeElement.name;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hooks onto the elements given event to perform storage write on value changes.\r\n   */\r\n  private _hookEvent(): void {\r\n    if (this.lsEvent) {\r\n      this._eventSubscription = observableFromEvent(this.er.nativeElement, this.lsEvent).pipe(\r\n        debounceTime(this.lsDebounce))\r\n        .subscribe(() => {\r\n          this.lss.asPromisable().set(this.lsKey,\r\n            getProperty(this._valuePath.length ? this._valuePath : ['value'], this.er.nativeElement),\r\n            this.lsPrefix)\r\n            .then(() => {\r\n              this.lss.asPromisable().get(this.lsKey, this.lsPrefix)\r\n                .then((value: any) => {\r\n                  this.lsStoredValue.emit(value);\r\n                })\r\n                .catch((err: Error) => console.error(err));\r\n            })\r\n            .catch((err: Error) => console.error(err));\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the elements value from storage.\r\n   */\r\n  private _initFromStorage(): void {\r\n    if (this.lsInitFromStorage) {\r\n      this.lss.asPromisable().get(this.lsKey, this.lsPrefix)\r\n        .then((storedValue: any) => {\r\n          setProperty(this._valuePath.length ? this._valuePath : ['value'], storedValue, this.er.nativeElement, this.lsFalsyTransformer);\r\n        })\r\n        .catch((err: Error) => console.error(err));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from event observable.\r\n   */\r\n  public ngOnDestroy(): void {\r\n    if (this._eventSubscription && !this._eventSubscription.closed) {\r\n      this._eventSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { StorageSerializer } from '../interfaces/storage-serializer';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n/**\r\n * Provides a default serialization mechanism while\r\n */\r\n@Injectable()\r\nexport class DefaultSerializer implements StorageSerializer {\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    public serialize(value: any): string {\r\n        return JSON.stringify(value);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    public deserialize(storedValue: string): any {\r\n        return JSON.parse(storedValue);\r\n    }\r\n}","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\nimport { NgxLocalstorageConfiguration } from './interfaces/storage-configuration';\r\nimport { LocalStorageDirective } from './directives/ngx-localstorage.directive';\r\nimport { NGX_LOCAL_STORAGE_CONFIG } from './tokens/storage-config';\r\nimport { DefaultSerializer } from './classes/default-serializer';\r\nimport { NGX_LOCAL_STORAGE_SERIALIZER } from './tokens/storage-serializer';\r\n\r\n/**\r\n * Provides the librarys module.\r\n */\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [\r\n    LocalStorageDirective\r\n  ],\r\n  exports: [\r\n    LocalStorageDirective\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NGX_LOCAL_STORAGE_SERIALIZER,\r\n      useClass: DefaultSerializer\r\n    }\r\n  ]\r\n})\r\nexport class NgxLocalStorageModule {\r\n\r\n  /**\r\n   * Initializes the module for the root module with the given configuration.\r\n   */\r\n  public static forRoot(config?: NgxLocalstorageConfiguration): ModuleWithProviders<NgxLocalStorageModule> {\r\n    return {\r\n      ngModule: NgxLocalStorageModule,\r\n      providers: [\r\n        {\r\n          provide: NGX_LOCAL_STORAGE_CONFIG,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance.\r\n   */\r\n  constructor(@Optional() @SkipSelf() parentModule: NgxLocalStorageModule) {\r\n    if (parentModule) {\r\n      throw new Error('NgxLocalStorageModule is already loaded. Import it in the AppModule only');\r\n    }\r\n  }\r\n}\r\n","import { filter } from 'rxjs/operators';\r\n\r\nimport { DecoratorOpts } from './interfaces/decorator-options';\r\nimport { LocalStorageService } from './services/ngx-localstorage.service';\r\nimport { StorageEventService } from './services/storage-event.service';\r\nimport { constructKey } from './utils';\r\nimport { DefaultSerializer } from './classes/default-serializer';\r\n\r\n/**\r\n * Provides a decoarator to bind a property directly to a storage value.\r\n * @param options configuration used for the decoarator\r\n */\r\nexport function ngxLocalStorage(options?: DecoratorOpts) {\r\n  return function (target: Object, propertyDescription: string) {\r\n\r\n    const key = !!options && !!options.key ? options.key : propertyDescription;\r\n    const prefix = !!options && !!options.prefix ? options.prefix : null;\r\n\r\n    const service: LocalStorageService = new LocalStorageService(new DefaultSerializer(),\r\n      {\r\n        prefix: prefix\r\n      });\r\n\r\n\r\n    const eventService: StorageEventService = new StorageEventService();\r\n    eventService.stream.pipe(\r\n      // TODO: filter should be more accurate\r\n      filter((ev: StorageEvent) => ev.key && ev.key.indexOf(constructKey(key, prefix)) >= 0)\r\n    )\r\n      .subscribe((ev: StorageEvent) => {\r\n        if (!!ev.newValue && typeof ev.newValue === 'string') {\r\n          if (ev.newValue !== 'null') {\r\n            target[propertyDescription] = ev.newValue;\r\n          } else {\r\n            target[propertyDescription] = !!options.nullTransformer ? options.nullTransformer() : null;\r\n          }\r\n        }\r\n      });\r\n\r\n    Object.defineProperty(target, propertyDescription, {\r\n      get: function () {\r\n        const storageValue = service.get(key, prefix);\r\n        return storageValue == null && !!options.nullTransformer ? options.nullTransformer() : storageValue;\r\n      },\r\n      set: function (value: any) {\r\n        service.set(key, value, prefix);\r\n      }\r\n    });\r\n  };\r\n}\r\n","/*\r\n * Public API Surface of ngx-localstorage\r\n */\r\n// module\r\nexport * from './lib/ngx-localstorage.module';\r\n// services\r\nexport * from './lib/services/ngx-localstorage.service';\r\nexport * from './lib/services/storage-event.service';\r\n// directives\r\nexport * from './lib/directives/ngx-localstorage.directive';\r\n// decorator\r\nexport * from './lib/decorators';\r\n// interfaces\r\nexport * from './lib/interfaces/decorator-options';\r\nexport * from './lib/interfaces/storage-configuration';\r\nexport * from './lib/interfaces/storage-serializer';\r\n// tokens\r\nexport * from './lib/tokens/storage-config';\r\nexport * from './lib/tokens/storage-serializer';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {DefaultSerializer as ɵa} from './lib/classes/default-serializer';"],"names":["InjectionToken","Injectable","Inject","BehaviorSubject","observableFromEvent","filter","share","EventEmitter","debounceTime","Directive","ElementRef","Input","Output","NgModule","Optional","SkipSelf"],"mappings":"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"}