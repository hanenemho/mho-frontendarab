import { EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';
import { Source } from './sources/source';
import { SourceFactory } from './sources/source.factory';
import { AvatarService } from './avatar.service';
import * as ɵngcc0 from '@angular/core';
declare type Style = Partial<CSSStyleDeclaration>;
/**
 * Universal avatar component that
 * generates avatar from different sources
 *
 * export
 * class AvatarComponent
 * implements {OnChanges}
 */
export declare class AvatarComponent implements OnChanges, OnDestroy {
    sourceFactory: SourceFactory;
    private avatarService;
    round: boolean;
    size: string | number;
    textSizeRatio: number;
    bgColor: string | undefined;
    fgColor: string;
    borderColor: string | undefined;
    style: Style;
    cornerRadius: string | number;
    facebook?: string | null;
    twitter?: string | null;
    google?: string | null;
    instagram?: string | null;
    vkontakte?: string | null;
    skype?: string | null;
    gravatar?: string | null;
    github?: string | null;
    custom?: string | null;
    initials?: string | null;
    value?: string | null;
    placeholder?: string;
    initialsSize: string | number;
    clickOnAvatar: EventEmitter<Source>;
    isAlive: boolean;
    avatarSrc: string | null;
    avatarText: string | null;
    avatarStyle: Style;
    hostStyle: Style;
    private currentIndex;
    private sources;
    constructor(sourceFactory: SourceFactory, avatarService: AvatarService);
    onAvatarClicked(): void;
    /**
     * Detect inputs change
     *
     * param {{ [propKey: string]: SimpleChange }} changes
     *
     * memberof AvatarComponent
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Fetch avatar source
     *
     * memberOf AvatarComponent
     */
    fetchAvatarSource(): void;
    private findNextSource;
    ngOnDestroy(): void;
    /**
     * Initialize the avatar component and its fallback system
     */
    private initializeAvatar;
    private sortAvatarSources;
    private buildTextAvatar;
    private buildImageAvatar;
    /**
     *
     * returns initials style
     *
     * memberOf AvatarComponent
     */
    private getInitialsStyle;
    /**
     *
     * returns image style
     *
     * memberOf AvatarComponent
     */
    private getImageStyle;
    /**
     * Fetch avatar image asynchronously.
     *
     * param {Source} source represents avatar source
     * memberof AvatarComponent
     */
    private fetchAndProcessAsyncAvatar;
    /**
     * Add avatar source
     *
     * param sourceType avatar source type e.g facebook,twitter, etc.
     * param sourceValue  source value e.g facebookId value, etc.
     */
    private addSource;
    /**
     * Remove avatar source
     *
     * param sourceType avatar source type e.g facebook,twitter, etc.
     */
    private removeSource;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvatarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AvatarComponent, "ngx-avatar", never, { "round": "round"; "size": "size"; "textSizeRatio": "textSizeRatio"; "fgColor": "fgColor"; "style": "style"; "cornerRadius": "cornerRadius"; "initialsSize": "initialsSize"; "bgColor": "bgColor"; "borderColor": "borderColor"; "facebook": "facebookId"; "twitter": "twitterId"; "google": "googleId"; "instagram": "instagramId"; "vkontakte": "vkontakteId"; "skype": "skypeId"; "gravatar": "gravatarId"; "github": "githubId"; "custom": "src"; "initials": "name"; "value": "value"; "placeholder": "placeholder"; }, { "clickOnAvatar": "clickOnAvatar"; }, never, never>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhdmF0YXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTb3VyY2UgfSBmcm9tICcuL3NvdXJjZXMvc291cmNlJztcbmltcG9ydCB7IFNvdXJjZUZhY3RvcnkgfSBmcm9tICcuL3NvdXJjZXMvc291cmNlLmZhY3RvcnknO1xuaW1wb3J0IHsgQXZhdGFyU2VydmljZSB9IGZyb20gJy4vYXZhdGFyLnNlcnZpY2UnO1xuZGVjbGFyZSB0eXBlIFN0eWxlID0gUGFydGlhbDxDU1NTdHlsZURlY2xhcmF0aW9uPjtcbi8qKlxuICogVW5pdmVyc2FsIGF2YXRhciBjb21wb25lbnQgdGhhdFxuICogZ2VuZXJhdGVzIGF2YXRhciBmcm9tIGRpZmZlcmVudCBzb3VyY2VzXG4gKlxuICogZXhwb3J0XG4gKiBjbGFzcyBBdmF0YXJDb21wb25lbnRcbiAqIGltcGxlbWVudHMge09uQ2hhbmdlc31cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXZhdGFyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHNvdXJjZUZhY3Rvcnk6IFNvdXJjZUZhY3Rvcnk7XG4gICAgcHJpdmF0ZSBhdmF0YXJTZXJ2aWNlO1xuICAgIHJvdW5kOiBib29sZWFuO1xuICAgIHNpemU6IHN0cmluZyB8IG51bWJlcjtcbiAgICB0ZXh0U2l6ZVJhdGlvOiBudW1iZXI7XG4gICAgYmdDb2xvcjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGZnQ29sb3I6IHN0cmluZztcbiAgICBib3JkZXJDb2xvcjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIHN0eWxlOiBTdHlsZTtcbiAgICBjb3JuZXJSYWRpdXM6IHN0cmluZyB8IG51bWJlcjtcbiAgICBmYWNlYm9vaz86IHN0cmluZyB8IG51bGw7XG4gICAgdHdpdHRlcj86IHN0cmluZyB8IG51bGw7XG4gICAgZ29vZ2xlPzogc3RyaW5nIHwgbnVsbDtcbiAgICBpbnN0YWdyYW0/OiBzdHJpbmcgfCBudWxsO1xuICAgIHZrb250YWt0ZT86IHN0cmluZyB8IG51bGw7XG4gICAgc2t5cGU/OiBzdHJpbmcgfCBudWxsO1xuICAgIGdyYXZhdGFyPzogc3RyaW5nIHwgbnVsbDtcbiAgICBnaXRodWI/OiBzdHJpbmcgfCBudWxsO1xuICAgIGN1c3RvbT86IHN0cmluZyB8IG51bGw7XG4gICAgaW5pdGlhbHM/OiBzdHJpbmcgfCBudWxsO1xuICAgIHZhbHVlPzogc3RyaW5nIHwgbnVsbDtcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgICBpbml0aWFsc1NpemU6IHN0cmluZyB8IG51bWJlcjtcbiAgICBjbGlja09uQXZhdGFyOiBFdmVudEVtaXR0ZXI8U291cmNlPjtcbiAgICBpc0FsaXZlOiBib29sZWFuO1xuICAgIGF2YXRhclNyYzogc3RyaW5nIHwgbnVsbDtcbiAgICBhdmF0YXJUZXh0OiBzdHJpbmcgfCBudWxsO1xuICAgIGF2YXRhclN0eWxlOiBTdHlsZTtcbiAgICBob3N0U3R5bGU6IFN0eWxlO1xuICAgIHByaXZhdGUgY3VycmVudEluZGV4O1xuICAgIHByaXZhdGUgc291cmNlcztcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2VGYWN0b3J5OiBTb3VyY2VGYWN0b3J5LCBhdmF0YXJTZXJ2aWNlOiBBdmF0YXJTZXJ2aWNlKTtcbiAgICBvbkF2YXRhckNsaWNrZWQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBEZXRlY3QgaW5wdXRzIGNoYW5nZVxuICAgICAqXG4gICAgICogcGFyYW0ge3sgW3Byb3BLZXk6IHN0cmluZ106IFNpbXBsZUNoYW5nZSB9fSBjaGFuZ2VzXG4gICAgICpcbiAgICAgKiBtZW1iZXJvZiBBdmF0YXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGZXRjaCBhdmF0YXIgc291cmNlXG4gICAgICpcbiAgICAgKiBtZW1iZXJPZiBBdmF0YXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBmZXRjaEF2YXRhclNvdXJjZSgpOiB2b2lkO1xuICAgIHByaXZhdGUgZmluZE5leHRTb3VyY2U7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoZSBhdmF0YXIgY29tcG9uZW50IGFuZCBpdHMgZmFsbGJhY2sgc3lzdGVtXG4gICAgICovXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplQXZhdGFyO1xuICAgIHByaXZhdGUgc29ydEF2YXRhclNvdXJjZXM7XG4gICAgcHJpdmF0ZSBidWlsZFRleHRBdmF0YXI7XG4gICAgcHJpdmF0ZSBidWlsZEltYWdlQXZhdGFyO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogcmV0dXJucyBpbml0aWFscyBzdHlsZVxuICAgICAqXG4gICAgICogbWVtYmVyT2YgQXZhdGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRJbml0aWFsc1N0eWxlO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogcmV0dXJucyBpbWFnZSBzdHlsZVxuICAgICAqXG4gICAgICogbWVtYmVyT2YgQXZhdGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRJbWFnZVN0eWxlO1xuICAgIC8qKlxuICAgICAqIEZldGNoIGF2YXRhciBpbWFnZSBhc3luY2hyb25vdXNseS5cbiAgICAgKlxuICAgICAqIHBhcmFtIHtTb3VyY2V9IHNvdXJjZSByZXByZXNlbnRzIGF2YXRhciBzb3VyY2VcbiAgICAgKiBtZW1iZXJvZiBBdmF0YXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBwcml2YXRlIGZldGNoQW5kUHJvY2Vzc0FzeW5jQXZhdGFyO1xuICAgIC8qKlxuICAgICAqIEFkZCBhdmF0YXIgc291cmNlXG4gICAgICpcbiAgICAgKiBwYXJhbSBzb3VyY2VUeXBlIGF2YXRhciBzb3VyY2UgdHlwZSBlLmcgZmFjZWJvb2ssdHdpdHRlciwgZXRjLlxuICAgICAqIHBhcmFtIHNvdXJjZVZhbHVlICBzb3VyY2UgdmFsdWUgZS5nIGZhY2Vib29rSWQgdmFsdWUsIGV0Yy5cbiAgICAgKi9cbiAgICBwcml2YXRlIGFkZFNvdXJjZTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYXZhdGFyIHNvdXJjZVxuICAgICAqXG4gICAgICogcGFyYW0gc291cmNlVHlwZSBhdmF0YXIgc291cmNlIHR5cGUgZS5nIGZhY2Vib29rLHR3aXR0ZXIsIGV0Yy5cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbW92ZVNvdXJjZTtcbn1cbmV4cG9ydCB7fTtcbiJdfQ==