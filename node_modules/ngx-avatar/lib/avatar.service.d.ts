import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AvatarConfigService } from './avatar-config.service';
import { AvatarSource } from './sources/avatar-source.enum';
import { Source } from './sources/source';
/**
 * list of Supported avatar sources
 */
import * as ɵngcc0 from '@angular/core';
export declare const defaultSources: AvatarSource[];
/**
 * list of default colors
 */
export declare const defaultColors: string[];
/**
 * Provides utilities methods related to Avatar component
 */
export declare class AvatarService {
    private http;
    private avatarConfigService;
    avatarSources: AvatarSource[];
    avatarColors: string[];
    private readonly failedSources;
    constructor(http: HttpClient, avatarConfigService: AvatarConfigService);
    fetchAvatar(avatarUrl: string): Observable<unknown>;
    getRandomColor(avatarText: string): string;
    compareSources(sourceType1: AvatarSource, sourceType2: AvatarSource): number;
    isSource(source: string): boolean;
    isTextAvatar(sourceType: AvatarSource): boolean;
    private buildSourceKey;
    sourceHasFailedBefore(source: Source): boolean;
    markSourceAsFailed(source: Source): void;
    private overrideAvatarSources;
    private overrideAvatarColors;
    private calculateAsciiCode;
    private getSourcePriority;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvatarService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AvatarService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYXZhdGFyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXZhdGFyQ29uZmlnU2VydmljZSB9IGZyb20gJy4vYXZhdGFyLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IEF2YXRhclNvdXJjZSB9IGZyb20gJy4vc291cmNlcy9hdmF0YXItc291cmNlLmVudW0nO1xuaW1wb3J0IHsgU291cmNlIH0gZnJvbSAnLi9zb3VyY2VzL3NvdXJjZSc7XG4vKipcbiAqIGxpc3Qgb2YgU3VwcG9ydGVkIGF2YXRhciBzb3VyY2VzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGRlZmF1bHRTb3VyY2VzOiBBdmF0YXJTb3VyY2VbXTtcbi8qKlxuICogbGlzdCBvZiBkZWZhdWx0IGNvbG9yc1xuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBkZWZhdWx0Q29sb3JzOiBzdHJpbmdbXTtcbi8qKlxuICogUHJvdmlkZXMgdXRpbGl0aWVzIG1ldGhvZHMgcmVsYXRlZCB0byBBdmF0YXIgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF2YXRhclNlcnZpY2Uge1xuICAgIHByaXZhdGUgaHR0cDtcbiAgICBwcml2YXRlIGF2YXRhckNvbmZpZ1NlcnZpY2U7XG4gICAgYXZhdGFyU291cmNlczogQXZhdGFyU291cmNlW107XG4gICAgYXZhdGFyQ29sb3JzOiBzdHJpbmdbXTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZhaWxlZFNvdXJjZXM7XG4gICAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCwgYXZhdGFyQ29uZmlnU2VydmljZTogQXZhdGFyQ29uZmlnU2VydmljZSk7XG4gICAgZmV0Y2hBdmF0YXIoYXZhdGFyVXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHVua25vd24+O1xuICAgIGdldFJhbmRvbUNvbG9yKGF2YXRhclRleHQ6IHN0cmluZyk6IHN0cmluZztcbiAgICBjb21wYXJlU291cmNlcyhzb3VyY2VUeXBlMTogQXZhdGFyU291cmNlLCBzb3VyY2VUeXBlMjogQXZhdGFyU291cmNlKTogbnVtYmVyO1xuICAgIGlzU291cmNlKHNvdXJjZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgICBpc1RleHRBdmF0YXIoc291cmNlVHlwZTogQXZhdGFyU291cmNlKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGJ1aWxkU291cmNlS2V5O1xuICAgIHNvdXJjZUhhc0ZhaWxlZEJlZm9yZShzb3VyY2U6IFNvdXJjZSk6IGJvb2xlYW47XG4gICAgbWFya1NvdXJjZUFzRmFpbGVkKHNvdXJjZTogU291cmNlKTogdm9pZDtcbiAgICBwcml2YXRlIG92ZXJyaWRlQXZhdGFyU291cmNlcztcbiAgICBwcml2YXRlIG92ZXJyaWRlQXZhdGFyQ29sb3JzO1xuICAgIHByaXZhdGUgY2FsY3VsYXRlQXNjaWlDb2RlO1xuICAgIHByaXZhdGUgZ2V0U291cmNlUHJpb3JpdHk7XG59XG4iXX0=