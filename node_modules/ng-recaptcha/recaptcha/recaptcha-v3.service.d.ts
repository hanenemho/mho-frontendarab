import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export interface OnExecuteData {
    /**
     * The name of the action that has been executed.
     */
    action: string;
    /**
     * The token that reCAPTCHA v3 provided when executing the action.
     */
    token: string;
}
export interface OnExecuteErrorData {
    /**
     * The name of the action that has been executed.
     */
    action: string;
    /**
     * The error which was encountered
     */
    error: any;
}
/**
 * The main service for working with reCAPTCHA v3 APIs.
 *
 * Use the `execute` method for executing a single action, and
 * `onExecute` observable for listening to all actions at once.
 */
export declare class ReCaptchaV3Service {
    /** @internal */
    private readonly isBrowser;
    /** @internal */
    private readonly siteKey;
    /** @internal */
    private readonly zone;
    /** @internal */
    private actionBacklog;
    /** @internal */
    private nonce;
    /** @internal */
    private language?;
    /** @internal */
    private baseUrl;
    /** @internal */
    private grecaptcha;
    /** @internal */
    private onExecuteSubject;
    /** @internal */
    private onExecuteErrorSubject;
    /** @internal */
    private onExecuteObservable;
    /** @internal */
    private onExecuteErrorObservable;
    constructor(zone: NgZone, siteKey: string, platformId: any, baseUrl?: string, nonce?: string, language?: string);
    readonly onExecute: Observable<OnExecuteData>;
    readonly onExecuteError: Observable<OnExecuteErrorData>;
    /**
     * Executes the provided `action` with reCAPTCHA v3 API.
     * Use the emitted token value for verification purposes on the backend.
     *
     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at
     * https://developers.google.com/recaptcha/docs/v3.
     *
     * @param {string} action the action to execute
     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.
     * The returned `Observable` completes immediately after emitting a value.
     */
    execute(action: string): Observable<string>;
    /** @internal */
    private executeActionWithSubject(action, subject);
    /** @internal */
    private init();
    /** @internal */
    private onLoadComplete;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ReCaptchaV3Service, [null, null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ReCaptchaV3Service>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhLXYzLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsicmVjYXB0Y2hhLXYzLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmV4cG9ydCBpbnRlcmZhY2UgT25FeGVjdXRlRGF0YSB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGFjdGlvbiB0aGF0IGhhcyBiZWVuIGV4ZWN1dGVkLlxuICAgICAqL1xuICAgIGFjdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0b2tlbiB0aGF0IHJlQ0FQVENIQSB2MyBwcm92aWRlZCB3aGVuIGV4ZWN1dGluZyB0aGUgYWN0aW9uLlxuICAgICAqL1xuICAgIHRva2VuOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIE9uRXhlY3V0ZUVycm9yRGF0YSB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGFjdGlvbiB0aGF0IGhhcyBiZWVuIGV4ZWN1dGVkLlxuICAgICAqL1xuICAgIGFjdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBlcnJvciB3aGljaCB3YXMgZW5jb3VudGVyZWRcbiAgICAgKi9cbiAgICBlcnJvcjogYW55O1xufVxuLyoqXG4gKiBUaGUgbWFpbiBzZXJ2aWNlIGZvciB3b3JraW5nIHdpdGggcmVDQVBUQ0hBIHYzIEFQSXMuXG4gKlxuICogVXNlIHRoZSBgZXhlY3V0ZWAgbWV0aG9kIGZvciBleGVjdXRpbmcgYSBzaW5nbGUgYWN0aW9uLCBhbmRcbiAqIGBvbkV4ZWN1dGVgIG9ic2VydmFibGUgZm9yIGxpc3RlbmluZyB0byBhbGwgYWN0aW9ucyBhdCBvbmNlLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSZUNhcHRjaGFWM1NlcnZpY2Uge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGlzQnJvd3NlcjtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBzaXRlS2V5O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHpvbmU7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgYWN0aW9uQmFja2xvZztcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBub25jZTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBsYW5ndWFnZT87XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgYmFzZVVybDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBncmVjYXB0Y2hhO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIG9uRXhlY3V0ZVN1YmplY3Q7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgb25FeGVjdXRlRXJyb3JTdWJqZWN0O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIG9uRXhlY3V0ZU9ic2VydmFibGU7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgb25FeGVjdXRlRXJyb3JPYnNlcnZhYmxlO1xuICAgIGNvbnN0cnVjdG9yKHpvbmU6IE5nWm9uZSwgc2l0ZUtleTogc3RyaW5nLCBwbGF0Zm9ybUlkOiBhbnksIGJhc2VVcmw/OiBzdHJpbmcsIG5vbmNlPzogc3RyaW5nLCBsYW5ndWFnZT86IHN0cmluZyk7XG4gICAgcmVhZG9ubHkgb25FeGVjdXRlOiBPYnNlcnZhYmxlPE9uRXhlY3V0ZURhdGE+O1xuICAgIHJlYWRvbmx5IG9uRXhlY3V0ZUVycm9yOiBPYnNlcnZhYmxlPE9uRXhlY3V0ZUVycm9yRGF0YT47XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIHByb3ZpZGVkIGBhY3Rpb25gIHdpdGggcmVDQVBUQ0hBIHYzIEFQSS5cbiAgICAgKiBVc2UgdGhlIGVtaXR0ZWQgdG9rZW4gdmFsdWUgZm9yIHZlcmlmaWNhdGlvbiBwdXJwb3NlcyBvbiB0aGUgYmFja2VuZC5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHJlQ0FQVENIQSB2MyBhY3Rpb25zIGFuZCB0b2tlbnMgcmVmZXIgdG8gdGhlIG9mZmljaWFsIGRvY3VtZW50YXRpb24gYXRcbiAgICAgKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvZG9jcy92My5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb24gdGhlIGFjdGlvbiB0byBleGVjdXRlXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8c3RyaW5nPn0gYW4gYE9ic2VydmFibGVgIHRoYXQgd2lsbCBlbWl0IHRoZSByZUNBUFRDSEEgdjMgc3RyaW5nIGB0b2tlbmAgdmFsdWUgd2hlbmV2ZXIgcmVhZHkuXG4gICAgICogVGhlIHJldHVybmVkIGBPYnNlcnZhYmxlYCBjb21wbGV0ZXMgaW1tZWRpYXRlbHkgYWZ0ZXIgZW1pdHRpbmcgYSB2YWx1ZS5cbiAgICAgKi9cbiAgICBleGVjdXRlKGFjdGlvbjogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIGV4ZWN1dGVBY3Rpb25XaXRoU3ViamVjdChhY3Rpb24sIHN1YmplY3QpO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIGluaXQoKTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBvbkxvYWRDb21wbGV0ZTtcbn1cbiJdfQ==