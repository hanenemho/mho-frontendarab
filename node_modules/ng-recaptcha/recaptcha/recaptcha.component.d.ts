/// <reference types="grecaptcha" />
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { RecaptchaLoaderService } from './recaptcha-loader.service';
import { RecaptchaSettings } from './recaptcha-settings';
import * as ɵngcc0 from '@angular/core';
export declare class RecaptchaComponent implements AfterViewInit, OnDestroy {
    private elementRef;
    private loader;
    private zone;
    id: string;
    siteKey: string;
    theme: ReCaptchaV2.Theme;
    type: ReCaptchaV2.Type;
    size: ReCaptchaV2.Size;
    tabIndex: number;
    badge: ReCaptchaV2.Badge;
    errorMode: 'handled' | 'default';
    resolved: EventEmitter<string>;
    error: EventEmitter<any[]>;
    /** @internal */
    private subscription;
    /** @internal */
    private widget;
    /** @internal */
    private grecaptcha;
    /** @internal */
    private executeRequested;
    constructor(elementRef: ElementRef, loader: RecaptchaLoaderService, zone: NgZone, settings?: RecaptchaSettings);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Executes the invisible recaptcha.
     * Does nothing if component's size is not set to "invisible".
     */
    execute(): void;
    reset(): void;
    /** @internal */
    private expired();
    /** @internal */
    private errored(args);
    /** @internal */
    private captchaResponseCallback(response);
    /** @internal */
    private grecaptchaReset();
    /** @internal */
    private renderRecaptcha();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RecaptchaComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RecaptchaComponent, "re-captcha", ["reCaptcha"], { "id": "id"; "errorMode": "errorMode"; "siteKey": "siteKey"; "theme": "theme"; "type": "type"; "size": "size"; "badge": "badge"; "tabIndex": "tabIndex"; }, { "resolved": "resolved"; "error": "error"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJyZWNhcHRjaGEuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cImdyZWNhcHRjaGFcIiAvPlxuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVjYXB0Y2hhTG9hZGVyU2VydmljZSB9IGZyb20gJy4vcmVjYXB0Y2hhLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFJlY2FwdGNoYVNldHRpbmdzIH0gZnJvbSAnLi9yZWNhcHRjaGEtc2V0dGluZ3MnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUmVjYXB0Y2hhQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBsb2FkZXI7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgc2l0ZUtleTogc3RyaW5nO1xuICAgIHRoZW1lOiBSZUNhcHRjaGFWMi5UaGVtZTtcbiAgICB0eXBlOiBSZUNhcHRjaGFWMi5UeXBlO1xuICAgIHNpemU6IFJlQ2FwdGNoYVYyLlNpemU7XG4gICAgdGFiSW5kZXg6IG51bWJlcjtcbiAgICBiYWRnZTogUmVDYXB0Y2hhVjIuQmFkZ2U7XG4gICAgZXJyb3JNb2RlOiAnaGFuZGxlZCcgfCAnZGVmYXVsdCc7XG4gICAgcmVzb2x2ZWQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55W10+O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSB3aWRnZXQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgZ3JlY2FwdGNoYTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBleGVjdXRlUmVxdWVzdGVkO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGxvYWRlcjogUmVjYXB0Y2hhTG9hZGVyU2VydmljZSwgem9uZTogTmdab25lLCBzZXR0aW5ncz86IFJlY2FwdGNoYVNldHRpbmdzKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBpbnZpc2libGUgcmVjYXB0Y2hhLlxuICAgICAqIERvZXMgbm90aGluZyBpZiBjb21wb25lbnQncyBzaXplIGlzIG5vdCBzZXQgdG8gXCJpbnZpc2libGVcIi5cbiAgICAgKi9cbiAgICBleGVjdXRlKCk6IHZvaWQ7XG4gICAgcmVzZXQoKTogdm9pZDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBleHBpcmVkKCk7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgZXJyb3JlZChhcmdzKTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBjYXB0Y2hhUmVzcG9uc2VDYWxsYmFjayhyZXNwb25zZSk7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgZ3JlY2FwdGNoYVJlc2V0KCk7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgcmVuZGVyUmVjYXB0Y2hhKCk7XG59XG4iXX0=