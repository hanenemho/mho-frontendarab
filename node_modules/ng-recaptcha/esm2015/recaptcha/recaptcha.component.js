import * as tslib_1 from "tslib";
import { AfterViewInit, Component, ElementRef, EventEmitter, HostBinding, Inject, Input, NgZone, OnDestroy, Optional, Output, } from '@angular/core';
import { RecaptchaLoaderService } from './recaptcha-loader.service';
import { RECAPTCHA_SETTINGS } from './tokens';
let nextId = 0;
let RecaptchaComponent = class RecaptchaComponent {
    constructor(elementRef, loader, zone, settings) {
        this.elementRef = elementRef;
        this.loader = loader;
        this.zone = zone;
        this.id = `ngrecaptcha-${nextId++}`;
        this.errorMode = 'default';
        this.resolved = new EventEmitter();
        this.error = new EventEmitter();
        if (settings) {
            this.siteKey = settings.siteKey;
            this.theme = settings.theme;
            this.type = settings.type;
            this.size = settings.size;
            this.badge = settings.badge;
        }
    }
    ngAfterViewInit() {
        this.subscription = this.loader.ready.subscribe((grecaptcha) => {
            if (grecaptcha != null && grecaptcha.render instanceof Function) {
                this.grecaptcha = grecaptcha;
                this.renderRecaptcha();
            }
        });
    }
    ngOnDestroy() {
        // reset the captcha to ensure it does not leave anything behind
        // after the component is no longer needed
        this.grecaptchaReset();
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    /**
     * Executes the invisible recaptcha.
     * Does nothing if component's size is not set to "invisible".
     */
    execute() {
        if (this.size !== 'invisible') {
            return;
        }
        if (this.widget != null) {
            this.grecaptcha.execute(this.widget);
        }
        else {
            // delay execution of recaptcha until it actually renders
            this.executeRequested = true;
        }
    }
    reset() {
        if (this.widget != null) {
            if (this.grecaptcha.getResponse(this.widget)) {
                // Only emit an event in case if something would actually change.
                // That way we do not trigger "touching" of the control if someone does a "reset"
                // on a non-resolved captcha.
                this.resolved.emit(null);
            }
            this.grecaptchaReset();
        }
    }
    /** @internal */
    expired() {
        this.resolved.emit(null);
    }
    /** @internal */
    errored(args) {
        this.error.emit(args);
    }
    /** @internal */
    captchaResponseCallback(response) {
        this.resolved.emit(response);
    }
    /** @internal */
    grecaptchaReset() {
        if (this.widget != null) {
            this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));
        }
    }
    /** @internal */
    renderRecaptcha() {
        // This `any` can be removed after @types/grecaptcha get updated
        const renderOptions = {
            badge: this.badge,
            callback: (response) => {
                this.zone.run(() => this.captchaResponseCallback(response));
            },
            'expired-callback': () => {
                this.zone.run(() => this.expired());
            },
            sitekey: this.siteKey,
            size: this.size,
            tabindex: this.tabIndex,
            theme: this.theme,
            type: this.type,
        };
        if (this.errorMode === 'handled') {
            renderOptions['error-callback'] = (...args) => {
                this.zone.run(() => this.errored(args));
            };
        }
        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);
        if (this.executeRequested === true) {
            this.executeRequested = false;
            this.execute();
        }
    }
};
RecaptchaComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: RecaptchaLoaderService },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_SETTINGS,] }] }
];
tslib_1.__decorate([
    Input(),
    HostBinding('attr.id')
], RecaptchaComponent.prototype, "id", void 0);
tslib_1.__decorate([
    Input()
], RecaptchaComponent.prototype, "siteKey", void 0);
tslib_1.__decorate([
    Input()
], RecaptchaComponent.prototype, "theme", void 0);
tslib_1.__decorate([
    Input()
], RecaptchaComponent.prototype, "type", void 0);
tslib_1.__decorate([
    Input()
], RecaptchaComponent.prototype, "size", void 0);
tslib_1.__decorate([
    Input()
], RecaptchaComponent.prototype, "tabIndex", void 0);
tslib_1.__decorate([
    Input()
], RecaptchaComponent.prototype, "badge", void 0);
tslib_1.__decorate([
    Input()
], RecaptchaComponent.prototype, "errorMode", void 0);
tslib_1.__decorate([
    Output()
], RecaptchaComponent.prototype, "resolved", void 0);
tslib_1.__decorate([
    Output()
], RecaptchaComponent.prototype, "error", void 0);
RecaptchaComponent = tslib_1.__decorate([
    Component({
        exportAs: 'reCaptcha',
        selector: 're-captcha',
        template: ``
    }),
    tslib_1.__param(3, Optional()), tslib_1.__param(3, Inject(RECAPTCHA_SETTINGS))
], RecaptchaComponent);
export { RecaptchaComponent };
//# sourceMappingURL=data:application/json;base64,